{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b283c7f1",
   "metadata": {},
   "source": [
    "## here I just analysed the raw lhe files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "840c5d75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.28/00\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import awkward as ak\n",
    "import hist\n",
    "import numpy as np\n",
    "import math\n",
    "import pylhe\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a8bc0cb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of events: 100000\n",
      "100000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def calculate_pseudorapidity(px, py, pz):\n",
    "    p = math.sqrt(px**2 + py**2 + pz**2)\n",
    "    eta = 0.5 * np.log((abs(p) + pz) / (abs(p) - pz))\n",
    "    return eta\n",
    "\n",
    "\n",
    "lhe_file_path = 'pp_ttxbbx_NLO_MG5_PY8.lhe'\n",
    "\n",
    "\n",
    "# Load the LHE file\n",
    "events = pylhe.read_lhe(lhe_file_path)\n",
    "\n",
    "# Create an empty list to store the pseudorapidity values\n",
    "eta_values = []\n",
    "\n",
    "\n",
    "\n",
    "# Open the LHE file\n",
    "with open(lhe_file_path, \"r\") as file:\n",
    "    lhe_data = file.read()\n",
    "\n",
    "# Count the number of events\n",
    "event_count = lhe_data.count(\"<event>\")\n",
    "\n",
    "# Print the result\n",
    "print(\"Number of events:\", event_count)\n",
    "\n",
    "\n",
    "# Iterate over the events\n",
    "i = 0\n",
    "for event in events:\n",
    "    # Iterate over the particles in the event\n",
    "    for particle in event.particles:\n",
    "        # Check if the particle is a top quark (particle ID = 6)\n",
    "        if particle.id == 6:\n",
    "            i += 1\n",
    "            # Extract the relevant particle properties\n",
    "            px = particle.px\n",
    "            py = particle.py\n",
    "            pz = particle.pz\n",
    "            \n",
    "            # Calculate pseudorapidity\n",
    "            eta = calculate_pseudorapidity(px, py, pz)\n",
    "            \n",
    "            # Append the pseudorapidity value to the list\n",
    "            if eta is not None:\n",
    "                eta_values.append(eta)\n",
    "\n",
    "# Create a histogram\n",
    "plt.hist(eta_values, bins=50, range=(-5, 5), alpha=0.7)\n",
    "\n",
    "# Set the labels and title\n",
    "plt.xlabel('Pseudorapidity (η)')\n",
    "plt.ylabel('Events')\n",
    "plt.title('Pseudorapidity Histogram for Top Quark')\n",
    "print(len(eta_values))\n",
    "# Display the histogram\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36c81b35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of events: 178128\n",
      "178128\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lhe_file_path = \"gg_ccx3s18ttbar_HO.lhe\"\n",
    "\n",
    "\n",
    "# Load the LHE file\n",
    "events = pylhe.read_lhe(lhe_file_path)\n",
    "\n",
    "# Create an empty list to store the pseudorapidity values\n",
    "eta_values = []\n",
    "\n",
    "M = []\n",
    "\n",
    "# Open the LHE file\n",
    "with open(lhe_file_path, \"r\") as file:\n",
    "    lhe_data = file.read()\n",
    "\n",
    "# Count the number of events\n",
    "event_count = lhe_data.count(\"<event>\")\n",
    "\n",
    "# Print the result\n",
    "print(\"Number of events:\", event_count)\n",
    "\n",
    "\n",
    "# Iterate over the events\n",
    "i = 0\n",
    "for event in events:\n",
    "    # Iterate over the particles in the event\n",
    "    for particle in event.particles:\n",
    "        # Check if the particle is a top quark (particle ID = 6)\n",
    "        if particle.id == 9940003: # the pd id for cc \n",
    "            i += 1\n",
    "            # Extract the relevant particle properties\n",
    "            px = particle.px\n",
    "            py = particle.py\n",
    "            pz = particle.pz\n",
    "            m = particle.m\n",
    "            M.append(m)\n",
    "            # Calculate pseudorapidity\n",
    "            eta = calculate_pseudorapidity(px, py, pz)\n",
    "            \n",
    "            # Append the pseudorapidity value to the list\n",
    "            if eta is not None:\n",
    "                eta_values.append(eta)\n",
    "\n",
    "# Create a histogram\n",
    "# plt.hist(eta_values, bins=50, range=(-5, 5), alpha=0.7)\n",
    "plt.hist(M, bins=50, range=(3, 3.5), alpha=0.7)\n",
    "\n",
    "# Set the labels and title\n",
    "plt.xlabel('Mass of CC')\n",
    "plt.ylabel('Events')\n",
    "plt.title('mass Histogram for J/Psi')\n",
    "print(len(eta_values))\n",
    "# Display the histogram\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "326583c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "events = pylhe.read_lhe(\"gg_ccx3s18ttbar_HO.lhe\")\n",
    "\n",
    "# Step 2: Extract relevant data\n",
    "etas_jpsi = []\n",
    "etas_ttbar = []\n",
    "\n",
    "for event in events:\n",
    "    for particle in event.particles:\n",
    "        if particle.id == 9940003:  # J/psi PDG ID is 9940003\n",
    "            p = np.array([particle.px, particle.py, particle.pz])\n",
    "            p_mag = np.linalg.norm(p)\n",
    "            cos_theta = p[2] / p_mag  # Cosine of theta\n",
    "            eta = -0.5 * np.log((1 - cos_theta) / (1 + cos_theta))  # Calculate eta\n",
    "            etas_jpsi.append(eta)\n",
    "        elif particle.id == 6 or particle.id == -6:  # Top quark PDG ID is 6 or -6\n",
    "            p = np.array([particle.px, particle.py, particle.pz])\n",
    "            p_mag = np.linalg.norm(p)\n",
    "            cos_theta = p[2] / p_mag  # Cosine of theta\n",
    "            eta = -0.5 * np.log((1 - cos_theta) / (1 + cos_theta))  # Calculate eta\n",
    "            etas_ttbar.append(eta)\n",
    "\n",
    "# Step 3: Calculate the eta difference\n",
    "delta_etas = [eta_jpsi - eta_ttbar for eta_jpsi, eta_ttbar in zip(etas_jpsi, etas_ttbar)]\n",
    "print(len(delta_etas))\n",
    "# Step 4: Plot the distribution\n",
    "plt.hist(delta_etas, bins=50, edgecolor='black')\n",
    "plt.xlabel(r'$\\Delta \\eta$ ($J/\\psi - t\\bar{t}$)')\n",
    "plt.ylabel('events')\n",
    "plt.title(r'Distribution of $\\Delta \\eta$ ($J/\\psi - t\\bar{t}$)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fadcacaf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
