{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c974f181",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ROOT\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Open the ROOT file\n",
    "root_file = ROOT.TFile(\"output.root\", \"READ\")\n",
    "\n",
    "# Access the histogram\n",
    "histogram = root_file.Get(\"hPtJPsi\")\n",
    "\n",
    "# Convert the histogram to a list\n",
    "hist_list = [histogram.GetBinContent(bin) for bin in range(1, histogram.GetNbinsX() + 1)]\n",
    "\n",
    "# Create the plot\n",
    "plt.bar(range(1, histogram.GetNbinsX() + 1), hist_list, align='center')\n",
    "\n",
    "# Set labels and title\n",
    "plt.xlabel(\"Pt\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.title(\"Transverse Momentum of J/Psi\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Close the ROOT file\n",
    "root_file.Close()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c7a4f9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Open the ROOT file\n",
    "root_file = ROOT.TFile(\"output.root\", \"READ\")\n",
    "\n",
    "# Access the histogram\n",
    "hist_eta = root_file.Get(\"hEtaJPsi\")\n",
    "\n",
    "# Convert the histogram to a list\n",
    "hist_eta_list = [hist_eta.GetBinContent(bin) for bin in range(1, hist_eta.GetNbinsX() + 1)]\n",
    "\n",
    "# Get the bin centers\n",
    "bin_centers = [(hist_eta.GetBinLowEdge(bin) + hist_eta.GetBinWidth(bin) / 2) for bin in range(1, hist_eta.GetNbinsX() + 1)]\n",
    "\n",
    "# Plot the histogram\n",
    "plt.bar(bin_centers, hist_eta_list, align='center')\n",
    "plt.xlabel(\"Pseudorapidity\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.title(\"Pseudorapidity of J/Psi\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Close the ROOT file\n",
    "root_file.Close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bfafbb05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Open the ROOT file\n",
    "root_file = ROOT.TFile(\"output.root\", \"READ\")\n",
    "\n",
    "# Access the histogram\n",
    "hist_Y = root_file.Get(\"hYJPsi\")\n",
    "\n",
    "# Convert the histogram to a list\n",
    "hist_Y_list = [hist_Y.GetBinContent(bin) for bin in range(1, hist_Y.GetNbinsX() + 1)]\n",
    "\n",
    "# Get the bin centers\n",
    "bin_centers = [(hist_Y.GetBinLowEdge(bin) + hist_Y.GetBinWidth(bin) / 2) for bin in range(1, hist_Y.GetNbinsX() + 1)]\n",
    "\n",
    "# Plot the histogram\n",
    "plt.bar(bin_centers, hist_Y_list, align='center')\n",
    "plt.xlabel(\"Rapidity\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.title(\"Rapidity of J/Psi\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Close the ROOT file\n",
    "root_file.Close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dce6e1ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of bins: 100\n",
      "Integral entries below 30: 1124.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Open the ROOT file\n",
    "root_file = ROOT.TFile(\"output.root\", \"READ\")\n",
    "\n",
    "# Access the histogram\n",
    "hist_vertex = root_file.Get(\"hTransverseVertex\")\n",
    "\n",
    "c=ROOT.TCanvas('c','c',1200,1200)\n",
    "hist_vertex.Draw('hist')\n",
    "c.Draw()\n",
    "\n",
    "\n",
    "# Set the desired threshold value for the integration\n",
    "threshold = 30\n",
    "\n",
    "# Perform the integration\n",
    "integral = hist_vertex.Integral(0, hist_vertex.FindBin(threshold))\n",
    "\n",
    "# Print the integral result\n",
    "num_bins = hist_vertex.GetNbinsX()\n",
    "print(f\"Number of bins: {num_bins}\")\n",
    "print(f\"Integral entries below {threshold}: {integral}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ae8c9046",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'Line2D' object has no property 'align'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[34], line 14\u001b[0m\n\u001b[1;32m     11\u001b[0m bin_centers \u001b[38;5;241m=\u001b[39m [(hist_vertex\u001b[38;5;241m.\u001b[39mGetBinLowEdge(\u001b[38;5;28mbin\u001b[39m) \u001b[38;5;241m+\u001b[39m hist_vertex\u001b[38;5;241m.\u001b[39mGetBinWidth(\u001b[38;5;28mbin\u001b[39m) \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m2\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m \u001b[38;5;28mbin\u001b[39m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m1\u001b[39m, hist_vertex\u001b[38;5;241m.\u001b[39mGetNbinsX() \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m)]\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# Plot the histogram\u001b[39;00m\n\u001b[0;32m---> 14\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbin_centers\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mhist_vertex_list\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malign\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mcenter\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     15\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransverse Vertex Position\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     16\u001b[0m plt\u001b[38;5;241m.\u001b[39mylabel(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEvents\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/pyplot.py:3019\u001b[0m, in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3017\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mplot)\n\u001b[1;32m   3018\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mplot\u001b[39m(\u001b[38;5;241m*\u001b[39margs, scalex\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, scaley\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m-> 3019\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mgca\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   3020\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscalex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscalex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mscaley\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mscaley\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   3021\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdata\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m}\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mis\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/axes/_axes.py:1605\u001b[0m, in \u001b[0;36mAxes.plot\u001b[0;34m(self, scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1363\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1364\u001b[0m \u001b[38;5;124;03mPlot y versus x as lines and/or markers.\u001b[39;00m\n\u001b[1;32m   1365\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1602\u001b[0m \u001b[38;5;124;03m(``'green'``) or hex strings (``'#008000'``).\u001b[39;00m\n\u001b[1;32m   1603\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1604\u001b[0m kwargs \u001b[38;5;241m=\u001b[39m cbook\u001b[38;5;241m.\u001b[39mnormalize_kwargs(kwargs, mlines\u001b[38;5;241m.\u001b[39mLine2D)\n\u001b[0;32m-> 1605\u001b[0m lines \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_lines(\u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39mdata, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)]\n\u001b[1;32m   1606\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m line \u001b[38;5;129;01min\u001b[39;00m lines:\n\u001b[1;32m   1607\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madd_line(line)\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py:315\u001b[0m, in \u001b[0;36m_process_plot_var_args.__call__\u001b[0;34m(self, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m    313\u001b[0m     this \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m args[\u001b[38;5;241m0\u001b[39m],\n\u001b[1;32m    314\u001b[0m     args \u001b[38;5;241m=\u001b[39m args[\u001b[38;5;241m1\u001b[39m:]\n\u001b[0;32m--> 315\u001b[0m \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_plot_args\u001b[49m\u001b[43m(\u001b[49m\u001b[43mthis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py:539\u001b[0m, in \u001b[0;36m_process_plot_var_args._plot_args\u001b[0;34m(self, tup, kwargs, return_kwargs)\u001b[0m\n\u001b[1;32m    537\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(result)\n\u001b[1;32m    538\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 539\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m [l[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;28;01mfor\u001b[39;00m l \u001b[38;5;129;01min\u001b[39;00m result]\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py:539\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    537\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(result)\n\u001b[1;32m    538\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 539\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m [l[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;28;01mfor\u001b[39;00m l \u001b[38;5;129;01min\u001b[39;00m result]\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py:532\u001b[0m, in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    529\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    530\u001b[0m     labels \u001b[38;5;241m=\u001b[39m [label] \u001b[38;5;241m*\u001b[39m n_datasets\n\u001b[0;32m--> 532\u001b[0m result \u001b[38;5;241m=\u001b[39m (\u001b[43mmake_artist\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mj\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m%\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mncx\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mj\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m%\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mncy\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkw\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    533\u001b[0m \u001b[43m                      \u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlabel\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    534\u001b[0m           \u001b[38;5;28;01mfor\u001b[39;00m j, label \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(labels))\n\u001b[1;32m    536\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m return_kwargs:\n\u001b[1;32m    537\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(result)\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py:354\u001b[0m, in \u001b[0;36m_process_plot_var_args._makeline\u001b[0;34m(self, x, y, kw, kwargs)\u001b[0m\n\u001b[1;32m    352\u001b[0m default_dict \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getdefaults(\u001b[38;5;28mset\u001b[39m(), kw)\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_setdefaults(default_dict, kw)\n\u001b[0;32m--> 354\u001b[0m seg \u001b[38;5;241m=\u001b[39m \u001b[43mmlines\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mLine2D\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkw\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    355\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m seg, kw\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/lines.py:397\u001b[0m, in \u001b[0;36mLine2D.__init__\u001b[0;34m(self, xdata, ydata, linewidth, linestyle, color, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\u001b[0m\n\u001b[1;32m    393\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mset_markeredgewidth(markeredgewidth)\n\u001b[1;32m    395\u001b[0m \u001b[38;5;66;03m# update kwargs before updating data to give the caller a\u001b[39;00m\n\u001b[1;32m    396\u001b[0m \u001b[38;5;66;03m# chance to init axes (and hence unit support)\u001b[39;00m\n\u001b[0;32m--> 397\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mupdate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    398\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpickradius \u001b[38;5;241m=\u001b[39m pickradius\n\u001b[1;32m    399\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mind_offset \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n",
      "File \u001b[0;32m~/.local/lib/python3.10/site-packages/matplotlib/artist.py:1062\u001b[0m, in \u001b[0;36mArtist.update\u001b[0;34m(self, props)\u001b[0m\n\u001b[1;32m   1060\u001b[0m             func \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mset_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mk\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[1;32m   1061\u001b[0m             \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m callable(func):\n\u001b[0;32m-> 1062\u001b[0m                 \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m!r}\u001b[39;00m\u001b[38;5;124m object \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1063\u001b[0m                                      \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas no property \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mk\u001b[38;5;132;01m!r}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   1064\u001b[0m             ret\u001b[38;5;241m.\u001b[39mappend(func(v))\n\u001b[1;32m   1065\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ret:\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'Line2D' object has no property 'align'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Convert the histogram to a list\n",
    "hist_vertex_list = [hist_vertex.GetBinContent(bin) for bin in range(1, hist_vertex.GetNbinsX() + 1)]\n",
    "\n",
    "Get the bin centers\n",
    "bin_centers = [(hist_vertex.GetBinLowEdge(bin) + hist_vertex.GetBinWidth(bin) / 2) for bin in range(1, hist_vertex.GetNbinsX() + 1)]\n",
    "\n",
    "# Plot the histogram\n",
    "plt.plot(bin_centers, hist_vertex_list, align='center')\n",
    "plt.xlabel(\"Transverse Vertex Position\")\n",
    "plt.ylabel(\"Events\")\n",
    "plt.title(\"Transverse Vertex of non-prompt J/Psi\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Close the ROOT file\n",
    "root_file.Close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9a25abb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
