{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1c58d747",
   "metadata": {},
   "source": [
    "# Generator level analysis from NanoAOD\n",
    "\n",
    "This notebook performs a generator level selection of 3 lepton + 4 jet event candidates which can be used for the search for double parton scattering production of $t\\bar{t}+J/\\Psi$.\n",
    "It is assumed that the $t\\bar{t}$ decays in a $(Wb)(Wb)\\rightarrow (\\ell\\nu b)(jj'b)$ final state and that the $J/\\Psi$ decays in a $\\ell\\ell$ final state.\n",
    "\n",
    "The events are skimmed by requiring either a trigger lepton (from the W decay) or two leptons with an invariant mass compatible with a $J/\\Psi$ decay.`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb1ecb61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.24/00\n"
     ]
    }
   ],
   "source": [
    "import ROOT\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9d945140",
   "metadata": {},
   "outputs": [],
   "source": [
    "infile='/eos/cms/store/cmst3/group/top/ttbarjpsi/gg_ccx3s18ttbar_HO/gg_ccx3s18ttbar_HO_NANOGEN.root'\n",
    "outfile='ttxccgenlevel.root'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2e5b0a17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1-1 cut: only events with generated leptons = True: pass=177826     all=178128     -- eff=99.83 % cumulative eff=99.83 %\n",
      "2-1 cut: lepton trigers: pass=177700     all=177826     -- eff=99.93 % cumulative eff=99.76 %\n",
      "3-1 cut: 1 trigger lepton or 1 J/Psi lepton but no Z candidate : pass=165992     all=177700     -- eff=93.41 % cumulative eff=93.19 %\n",
      "4-1 cut: only events with genJPsiCanditates > 0: pass=20370      all=165992     -- eff=12.27 % cumulative eff=11.44 %\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <RTaskArenaWrapper>: CPU Bandwith Control Active. Proceeding with 4 threads accordingly\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessHistory is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ProcessConfiguration is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::Hash<1> is available\n",
      "Warning in <TClass::Init>: no dictionary for class edm::ParameterSetBlob is available\n",
      "Warning in <TClass::Init>: no dictionary for class pair<edm::Hash<1>,edm::ParameterSetBlob> is available\n"
     ]
    }
   ],
   "source": [
    "ROOT.gInterpreter.Declare('#include \"selection_helpers.h\"')\n",
    "    \n",
    "ROOT.ROOT.EnableImplicitMT()\n",
    "rdf = ROOT.RDataFrame('Events',infile)\n",
    "\n",
    "#lepton selection: select in the kinematics region of interest\n",
    "rdf = rdf.Define('genlep', 'GenPart_status==1 && GenPart_pt>1 && abs(GenPart_eta)<2.4 && (abs(GenPart_pdgId)==11 || abs(GenPart_pdgId)==13)') \\\n",
    "         .Define('n_genlep', 'Sum(genlep)') \\\n",
    "         .Filter('n_genlep>0' , '1-1 cut: only events with generated leptons = True')\n",
    "\n",
    "# report the results of cut application:\n",
    "rdf.Report()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "for c in ['pdgId','pt','eta','phi']:\n",
    "    rdf = rdf.Define(f'GenLep_{c}',f'GenPart_{c}[genlep]')\n",
    "    \n",
    "    \n",
    "#older code:\n",
    "## count trigger lepton candidates (high pT)\n",
    "# rdf = rdf.Define('gentriglep','GenLep_pt>3.5')\\\n",
    "#          .Define('n_gentriglep', 'Sum(gentriglep)')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Nima code:\n",
    "\n",
    "\n",
    "rdf = rdf.Define('gentriglep','(GenLep_pt>3.5 && abs(GenLep_eta)<1.2) || (GenLep_pt>2.5 && abs(GenLep_eta)>1.2)') \\\n",
    "         .Define('n_gentriglep', 'Sum(gentriglep)')\\\n",
    "         .Filter('n_gentriglep > 0' , '2-1 cut: lepton trigers')\n",
    "\n",
    "\n",
    "\n",
    "rdf.Report()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#count dileptons in the J/Psi and Z mass regions\n",
    "rdf = rdf.Define('genjpsicands', ' dileptonCands(GenLep_pdgId,GenLep_pt,GenLep_eta,GenLep_phi,3.096,1.2)') \\\n",
    "         .Define('n_genjpsicands', 'Sum(genjpsicands)') \\\n",
    "         .Define('genzcands', 'dileptonCands(GenLep_pdgId[gentriglep],GenLep_pt[gentriglep],GenLep_eta[gentriglep],GenLep_phi[gentriglep],91.,15.)') \\\n",
    "         .Define('n_genzcands', 'Sum(genzcands)')\n",
    "\n",
    "#filter: 1 trigger lepton or 1 J/Psi lepton but no Z candidate\n",
    "rdf = rdf.Filter('(n_gentriglep>0 || n_genjpsicands>0) && n_genzcands==0' , '3-1 cut: 1 trigger lepton or 1 J/Psi lepton but no Z candidate ')\n",
    "rdf.Report()\n",
    "\n",
    "\n",
    "\n",
    "#save information on trigger lepton\n",
    "rdf = rdf.Define('TrigLepton_pdgId','n_gentriglep>0 ? GenLep_pdgId[gentriglep][0] : 0') \\\n",
    "         .Define('TrigLepton_pt',   'n_gentriglep>0 ? GenLep_pt[gentriglep][0]: 0') \\\n",
    "         .Define('TrigLepton_eta',  'n_gentriglep>0 ? GenLep_eta[gentriglep][0]: 0') \\\n",
    "         .Define('TrigLepton_phi',  'n_gentriglep>0 ? GenLep_phi[gentriglep][0]: 0')\n",
    "\n",
    "#save information on J/Psi leptons\n",
    "for i in range(2):\n",
    "    rdf = rdf.Define(f'JPsiLepton_{i+1}_pdgId',f'n_genjpsicands>0 ? GenLep_pdgId[genjpsicands][{i}] : 0') \\\n",
    "             .Define(f'JPsiLepton_{i+1}_pt',   f'n_genjpsicands>0 ? GenLep_pt[genjpsicands][{i}] : 0') \\\n",
    "             .Define(f'JPsiLepton_{i+1}_eta',  f'n_genjpsicands>0 ? GenLep_eta[genjpsicands][{i}] : 0') \\\n",
    "             .Define(f'JPsiLepton_{i+1}_phi',  f'n_genjpsicands>0 ? GenLep_phi[genjpsicands][{i}] : 0')\n",
    "\n",
    "    \n",
    "#save kinematics of the J/Psi    \n",
    "rdf = rdf.Define('JPsi_mass','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"mass\") : 0') \\\n",
    "         .Define('JPsi_pt','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"pt\") : 0') \\\n",
    "         .Define('JPsi_eta','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"eta\") : 0') \\\n",
    "         .Define('JPsi_phi','n_genjpsicands > 0 ? kinematics2l(JPsiLepton_1_pdgId,JPsiLepton_1_pt,JPsiLepton_1_eta,JPsiLepton_1_phi,JPsiLepton_2_pdgId,JPsiLepton_2_pt,JPsiLepton_2_eta,JPsiLepton_2_phi,\"phi\") : 0')\\\n",
    "         .Filter(\"n_genjpsicands>0\" , '4-1 cut: only events with genJPsiCanditates > 0')\n",
    "\n",
    "\n",
    "\n",
    "## report the cuts:\n",
    "# rdf.Report().Print()\n",
    "\n",
    "\n",
    "#jet selection\n",
    "rdf = rdf.Define('genjet', 'GenJet_pt>30 && abs(GenJet_eta)<2.4 && crossClean(GenJet_eta,GenJet_phi,GenLep_eta[gentriglep],GenLep_phi[gentriglep])') \\\n",
    "         .Define('n_genjet', 'Sum(genjet)')\n",
    "\n",
    "#save the selection\n",
    "columns=['n_genlep','n_gentriglep','n_genjpsicands']\n",
    "columns+=['genlep','GenLep_pdgId']\n",
    "columns+=['TrigLepton_pdgId','TrigLepton_pt','TrigLepton_eta','TrigLepton_phi']\n",
    "for i in range(1,3):\n",
    "    columns+=[f'JPsiLepton_{i}_pdgId',f'JPsiLepton_{i}_pt',f'JPsiLepton_{i}_eta',f'JPsiLepton_{i}_phi']\n",
    "columns+=['JPsi_pt','JPsi_eta','JPsi_phi','JPsi_mass']\n",
    "rdf.Snapshot('Events',outfile,columns)\n",
    "rdf.Report().Print()\n",
    "\n",
    "ROOT.ROOT.DisableImplicitMT()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cc1cd34",
   "metadata": {},
   "source": [
    "### branches in my nanoAOD file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4637f458",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "genlep\n",
      "n_genlep\n",
      "GenLep_pdgId\n",
      "GenLep_pt\n",
      "GenLep_eta\n",
      "GenLep_phi\n",
      "gentriglep\n",
      "n_gentriglep\n",
      "genjpsicands\n",
      "n_genjpsicands\n",
      "genzcands\n",
      "n_genzcands\n",
      "TrigLepton_pdgId\n",
      "TrigLepton_pt\n",
      "TrigLepton_eta\n",
      "TrigLepton_phi\n",
      "JPsiLepton_1_pdgId\n",
      "JPsiLepton_1_pt\n",
      "JPsiLepton_1_eta\n",
      "JPsiLepton_1_phi\n",
      "JPsiLepton_2_pdgId\n",
      "JPsiLepton_2_pt\n",
      "JPsiLepton_2_eta\n",
      "JPsiLepton_2_phi\n",
      "JPsi_mass\n",
      "JPsi_pt\n",
      "JPsi_eta\n",
      "JPsi_phi\n",
      "genjet\n",
      "n_genjet\n",
      "run\n",
      "luminosityBlock\n",
      "event\n",
      "bunchCrossing\n",
      "HTXS_njets25\n",
      "HTXS_njets30\n",
      "HTXS_stage1_1_cat_pTjet25GeV\n",
      "HTXS_stage1_1_cat_pTjet30GeV\n",
      "HTXS_stage1_1_fine_cat_pTjet25GeV\n",
      "HTXS_stage1_1_fine_cat_pTjet30GeV\n",
      "HTXS_stage1_2_cat_pTjet25GeV\n",
      "HTXS_stage1_2_cat_pTjet30GeV\n",
      "HTXS_stage1_2_fine_cat_pTjet25GeV\n",
      "HTXS_stage1_2_fine_cat_pTjet30GeV\n",
      "HTXS_stage_0\n",
      "HTXS_stage_1_pTjet25\n",
      "HTXS_stage_1_pTjet30\n",
      "HTXS_Higgs_pt\n",
      "HTXS_Higgs_y\n",
      "nGenJetAK8\n",
      "GenJetAK8_eta\n",
      "GenJetAK8_mass\n",
      "GenJetAK8_phi\n",
      "GenJetAK8_pt\n",
      "nGenJet\n",
      "GenJet_eta\n",
      "GenJet_mass\n",
      "GenJet_phi\n",
      "GenJet_pt\n",
      "nGenPart\n",
      "GenPart_genPartIdxMother\n",
      "GenPart_statusFlags\n",
      "GenPart_pdgId\n",
      "GenPart_status\n",
      "GenPart_eta\n",
      "GenPart_mass\n",
      "GenPart_phi\n",
      "GenPart_pt\n",
      "Generator_id1\n",
      "Generator_id2\n",
      "Generator_binvar\n",
      "Generator_scalePDF\n",
      "Generator_weight\n",
      "Generator_x1\n",
      "Generator_x2\n",
      "Generator_xpdf1\n",
      "Generator_xpdf2\n",
      "GenVtx_x\n",
      "GenVtx_y\n",
      "GenVtx_z\n",
      "nGenVisTau\n",
      "GenVisTau_status\n",
      "GenVisTau_charge\n",
      "GenVisTau_genPartIdxMother\n",
      "GenVisTau_eta\n",
      "GenVisTau_mass\n",
      "GenVisTau_phi\n",
      "GenVisTau_pt\n",
      "genWeight\n",
      "LHEWeight_originalXWGTUP\n",
      "nLHEPdfWeight\n",
      "LHEPdfWeight\n",
      "nLHEReweightingWeight\n",
      "LHEReweightingWeight\n",
      "nLHEScaleWeight\n",
      "LHEScaleWeight\n",
      "nPSWeight\n",
      "PSWeight\n",
      "LHE_Njets\n",
      "LHE_Nb\n",
      "LHE_Nc\n",
      "LHE_Nuds\n",
      "LHE_Nglu\n",
      "LHE_NpNLO\n",
      "LHE_NpLO\n",
      "LHE_HT\n",
      "LHE_HTIncoming\n",
      "LHE_Vpt\n",
      "LHE_AlphaS\n",
      "nLHEPart\n",
      "LHEPart_pdgId\n",
      "LHEPart_status\n",
      "LHEPart_spin\n",
      "LHEPart_pt\n",
      "LHEPart_eta\n",
      "LHEPart_phi\n",
      "LHEPart_mass\n",
      "LHEPart_incomingpz\n",
      "GenMET_phi\n",
      "GenMET_pt\n",
      "nGenDressedLepton\n",
      "GenDressedLepton_hasTauAnc\n",
      "GenDressedLepton_pdgId\n",
      "GenDressedLepton_eta\n",
      "GenDressedLepton_mass\n",
      "GenDressedLepton_phi\n",
      "GenDressedLepton_pt\n",
      "MET_fiducialGenPhi\n",
      "MET_fiducialGenPt\n",
      "nGenIsolatedPhoton\n",
      "GenIsolatedPhoton_eta\n",
      "GenIsolatedPhoton_mass\n",
      "GenIsolatedPhoton_phi\n",
      "GenIsolatedPhoton_pt\n",
      "GenJetAK8_hadronFlavour\n",
      "GenJetAK8_partonFlavour\n",
      "GenJet_hadronFlavour\n",
      "GenJet_partonFlavour\n",
      "GenVtx_t0\n"
     ]
    }
   ],
   "source": [
    "# Get the list of column names\n",
    "column_names = rdf.GetColumnNames()\n",
    "\n",
    "# Print the names of all columns\n",
    "for column in column_names:\n",
    "    print(column)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "20621ebe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Read (20370, 21) events. Columns available are=['n_genlep', 'n_gentriglep', 'n_genjpsicands', 'genlep', 'GenLep_pdgId', 'TrigLepton_pdgId', 'TrigLepton_pt', 'TrigLepton_eta', 'TrigLepton_phi', 'JPsiLepton_1_pdgId', 'JPsiLepton_1_pt', 'JPsiLepton_1_eta', 'JPsiLepton_1_phi', 'JPsiLepton_2_pdgId', 'JPsiLepton_2_pt', 'JPsiLepton_2_eta', 'JPsiLepton_2_phi', 'JPsi_pt', 'JPsi_eta', 'JPsi_phi', 'JPsi_mass']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_genlep</th>\n",
       "      <th>n_gentriglep</th>\n",
       "      <th>TrigLepton_pdgId</th>\n",
       "      <th>TrigLepton_pt</th>\n",
       "      <th>TrigLepton_eta</th>\n",
       "      <th>TrigLepton_phi</th>\n",
       "      <th>JPsiLepton_1_pdgId</th>\n",
       "      <th>JPsiLepton_1_pt</th>\n",
       "      <th>JPsiLepton_1_eta</th>\n",
       "      <th>JPsiLepton_1_phi</th>\n",
       "      <th>JPsiLepton_2_pdgId</th>\n",
       "      <th>JPsiLepton_2_pt</th>\n",
       "      <th>JPsiLepton_2_eta</th>\n",
       "      <th>JPsiLepton_2_phi</th>\n",
       "      <th>JPsi_pt</th>\n",
       "      <th>JPsi_eta</th>\n",
       "      <th>JPsi_phi</th>\n",
       "      <th>JPsi_mass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "      <td>20370.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.570741</td>\n",
       "      <td>4.335150</td>\n",
       "      <td>1.257732</td>\n",
       "      <td>24.610838</td>\n",
       "      <td>-0.001849</td>\n",
       "      <td>-0.005423</td>\n",
       "      <td>5.475012</td>\n",
       "      <td>3.934630</td>\n",
       "      <td>0.003627</td>\n",
       "      <td>-0.012633</td>\n",
       "      <td>-5.475012</td>\n",
       "      <td>3.944171</td>\n",
       "      <td>0.007242</td>\n",
       "      <td>-0.021915</td>\n",
       "      <td>7.382094</td>\n",
       "      <td>0.007719</td>\n",
       "      <td>-0.015417</td>\n",
       "      <td>3.406698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.228728</td>\n",
       "      <td>1.288151</td>\n",
       "      <td>12.576843</td>\n",
       "      <td>32.569824</td>\n",
       "      <td>1.206283</td>\n",
       "      <td>1.785147</td>\n",
       "      <td>11.789445</td>\n",
       "      <td>3.124386</td>\n",
       "      <td>1.219752</td>\n",
       "      <td>1.764451</td>\n",
       "      <td>11.789445</td>\n",
       "      <td>3.373648</td>\n",
       "      <td>1.209170</td>\n",
       "      <td>1.759782</td>\n",
       "      <td>3.999362</td>\n",
       "      <td>1.260769</td>\n",
       "      <td>1.732390</td>\n",
       "      <td>1.206152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>2.500936</td>\n",
       "      <td>-2.399902</td>\n",
       "      <td>-3.141602</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>1.000077</td>\n",
       "      <td>-2.399902</td>\n",
       "      <td>-3.141602</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>1.000040</td>\n",
       "      <td>-2.399902</td>\n",
       "      <td>-3.141113</td>\n",
       "      <td>0.053201</td>\n",
       "      <td>-4.506192</td>\n",
       "      <td>-3.141580</td>\n",
       "      <td>0.025031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>4.926252</td>\n",
       "      <td>-0.970154</td>\n",
       "      <td>-1.537048</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>1.895541</td>\n",
       "      <td>-0.997742</td>\n",
       "      <td>-1.515015</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>1.840355</td>\n",
       "      <td>-0.983826</td>\n",
       "      <td>-1.534119</td>\n",
       "      <td>5.472080</td>\n",
       "      <td>-1.056692</td>\n",
       "      <td>-1.503468</td>\n",
       "      <td>3.096402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>8.864068</td>\n",
       "      <td>-0.012692</td>\n",
       "      <td>0.004804</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>3.209823</td>\n",
       "      <td>-0.003880</td>\n",
       "      <td>-0.011129</td>\n",
       "      <td>-13.000000</td>\n",
       "      <td>3.156029</td>\n",
       "      <td>0.017694</td>\n",
       "      <td>-0.017054</td>\n",
       "      <td>6.716707</td>\n",
       "      <td>0.012555</td>\n",
       "      <td>-0.015309</td>\n",
       "      <td>3.096888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>33.483665</td>\n",
       "      <td>0.973480</td>\n",
       "      <td>1.520996</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>4.974630</td>\n",
       "      <td>1.010498</td>\n",
       "      <td>1.476440</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>4.976705</td>\n",
       "      <td>0.996185</td>\n",
       "      <td>1.485352</td>\n",
       "      <td>8.252729</td>\n",
       "      <td>1.076105</td>\n",
       "      <td>1.468601</td>\n",
       "      <td>3.097298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>526.649536</td>\n",
       "      <td>2.399902</td>\n",
       "      <td>3.141602</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>112.934792</td>\n",
       "      <td>2.399902</td>\n",
       "      <td>3.141113</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>133.557739</td>\n",
       "      <td>2.399902</td>\n",
       "      <td>3.141602</td>\n",
       "      <td>134.644302</td>\n",
       "      <td>4.701017</td>\n",
       "      <td>3.141364</td>\n",
       "      <td>16.229671</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           n_genlep  n_gentriglep  TrigLepton_pdgId  TrigLepton_pt  \\\n",
       "count  20370.000000  20370.000000      20370.000000   20370.000000   \n",
       "mean       5.570741      4.335150          1.257732      24.610838   \n",
       "std        1.228728      1.288151         12.576843      32.569824   \n",
       "min        2.000000      1.000000        -13.000000       2.500936   \n",
       "25%        5.000000      3.000000        -13.000000       4.926252   \n",
       "50%        6.000000      4.000000         11.000000       8.864068   \n",
       "75%        6.000000      5.000000         13.000000      33.483665   \n",
       "max       10.000000      9.000000         13.000000     526.649536   \n",
       "\n",
       "       TrigLepton_eta  TrigLepton_phi  JPsiLepton_1_pdgId  JPsiLepton_1_pt  \\\n",
       "count    20370.000000    20370.000000        20370.000000     20370.000000   \n",
       "mean        -0.001849       -0.005423            5.475012         3.934630   \n",
       "std          1.206283        1.785147           11.789445         3.124386   \n",
       "min         -2.399902       -3.141602          -13.000000         1.000077   \n",
       "25%         -0.970154       -1.537048          -13.000000         1.895541   \n",
       "50%         -0.012692        0.004804           13.000000         3.209823   \n",
       "75%          0.973480        1.520996           13.000000         4.974630   \n",
       "max          2.399902        3.141602           13.000000       112.934792   \n",
       "\n",
       "       JPsiLepton_1_eta  JPsiLepton_1_phi  JPsiLepton_2_pdgId  \\\n",
       "count      20370.000000      20370.000000        20370.000000   \n",
       "mean           0.003627         -0.012633           -5.475012   \n",
       "std            1.219752          1.764451           11.789445   \n",
       "min           -2.399902         -3.141602          -13.000000   \n",
       "25%           -0.997742         -1.515015          -13.000000   \n",
       "50%           -0.003880         -0.011129          -13.000000   \n",
       "75%            1.010498          1.476440           13.000000   \n",
       "max            2.399902          3.141113           13.000000   \n",
       "\n",
       "       JPsiLepton_2_pt  JPsiLepton_2_eta  JPsiLepton_2_phi       JPsi_pt  \\\n",
       "count     20370.000000      20370.000000      20370.000000  20370.000000   \n",
       "mean          3.944171          0.007242         -0.021915      7.382094   \n",
       "std           3.373648          1.209170          1.759782      3.999362   \n",
       "min           1.000040         -2.399902         -3.141113      0.053201   \n",
       "25%           1.840355         -0.983826         -1.534119      5.472080   \n",
       "50%           3.156029          0.017694         -0.017054      6.716707   \n",
       "75%           4.976705          0.996185          1.485352      8.252729   \n",
       "max         133.557739          2.399902          3.141602    134.644302   \n",
       "\n",
       "           JPsi_eta      JPsi_phi     JPsi_mass  \n",
       "count  20370.000000  20370.000000  20370.000000  \n",
       "mean       0.007719     -0.015417      3.406698  \n",
       "std        1.260769      1.732390      1.206152  \n",
       "min       -4.506192     -3.141580      0.025031  \n",
       "25%       -1.056692     -1.503468      3.096402  \n",
       "50%        0.012555     -0.015309      3.096888  \n",
       "75%        1.076105      1.468601      3.097298  \n",
       "max        4.701017      3.141364     16.229671  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#open as a pandas dataframe\n",
    "rdf=ROOT.RDataFrame('Events','ttxccgenlevel.root')\n",
    "df=pd.DataFrame(rdf.AsNumpy())\n",
    "print(f'Read {df.shape} events. Columns available are={list(df.columns)}')\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8130fb9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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E5y4/PEf/zF7CMFSey7151F7HrWf7sUXX8TnPvc5PPzww/jZz36G5uZmXHbZZbj44ouRSqWwd+9ePPvss7jiiitw//33Y2hoCHv27DniNp544gk88cQTuPrqq3HzzTfjvvvuw759+/Da174WmzZtAsBrX+4E5zEApwJ4KPfvBgD74xiQLxdddBF7CMFSey7151F7HrWfbmBgAN3d3XjjG98IAHjpS1+K1atX4+qrr8add96J9vZ2TExM4Pjjj8eKFSuwYsUKvOQlLzniNl71qlfhmGOOwerVqzE2Noann34aZ5xxBo4++mg0NDQA4LWf7V1UtyL77qmlAB4ws5/nPnUigJtjHlusDh06xB5CsNSeS/151J6nktsvZGfjUk444QRs3rwZt956K5555hk88sgjuPbaa3H66afj7W9/O+644w445/Dcc8/h17/+NZ599ln86le/OuI2jjnmmCP+vXHjRtx///0488wz8dhjjwHgtZ9tBedrAG6Pfxj+6bDdPGrPpf48as+j9oddccUV+MIXvgAAuOSSS9DY2Ih169bhyiuvxMaNG/He974XX/7yl1FfX48vf/nLaG5uxhlnnIETTzwR27dvL3nbl156Kfbu3YsVK1bgpJNOQk1NzeSxanwreaA/MzsDwNkAlgD4OYAbnXM/n/ELohxYzAf66+npwbp162K5bSlN7bnUn0ftedTej1tuuQWbN29GbW0tzjrrLNx6662xtp/3gf6cc/cBuC93I+sBvNXMNgIYAfAT59w9kY/Wk1WrVrGHECy151J/HrXnUXs/Nm3ahMsvvxzPP/88zj//fAC89nM+VYOZLQawDcAG59wPYhkV4l/B6ezsnNzDW/xSey7151F7HrXnibN9qRWcsiY4ZnYpsm8VPxfZd1QNAXjAOfeRCMc59T5jneA452ivC4ZO7bnUn0ftedSeJ872pSY4R5V5G/8TwN7cn5sAvBrA+RGNj2L//op+l3tFU3su9edRex6152G1L3cF5ykA5wD4PIBPAOgB8JBz7mWxDSzmFRwRERGpbPPeybjAnwP4FwA/ds49aGZPIzvRqViZTAZ1dXXsYQRJ7bnUn0fteSqyffPyBXztwaIXO+fwp3/6p3jooYfwwgsv4DOf+QzOOeecI64z2wk5zznnHNx0001lDyXffj4n6lyIcic45pxrzP/DOXeSmb0xpjF5kdgNvdQGPcMGW2kS2z4Q6s+j9jxqn3XnnXdi0aJFePjhhzE8PIw9e/ZMm+BErbD9XE/UuRCzHcn4NQBeB+BDZvZ/Cj51NICLAGyOb2jxamtrw7Zt29jDCJLac6k/j9rzVHT7ufxyO8uqz5IlS9Dd3Y2BgQGsWrUKt9xyy+SKzAMPPIAf/vCHqK2txbe+9S18/vOfx6pVq/Cd73wHxx577LTbKvdEnX/2Z3+GxsbGeZ2oc+qpIeZitp2MhwB0AXgR2QP95f90AvjDed9rAmzdupU9hNKaDx7+U2US377KqT+P2vOofdZpp52Gt73tbbjgggtw1lln4Wc/+1nR6y1duhT33XcfGhoa8L3vfW/a5wtP1PmP//iPaG5uxn/913/h4osvxm233YZnnnlm8kSdjzzyCK688kr09PQccRtPPPEE/v3f/x1/9Ed/hJtvvhmf/exnsW/fPtx8881oa2tb8GMtOcFxzj3hnPtnZI97cxOA2wr+DCz43svQ1NQ07U86nV7w7R44cGDaZT/+8Y9x1llnYdWqVTjhhBNw1lln4Yc//CEAYM+ePTAzmNkR3+wPfOADk5d//OMfBwB0dXXhoosuwvr161FTU4ONGzfiQx/6EAYGvCRLvGLtxR/151F7HrXPevTRR7F3717ccccd+MpXvoKPfOTw0V4mJiYmP37Vq14FADjjjDPw85//HBdddBH27Nkz+XOs8ESdH/7wh/H8889j9erVuO2223DppZcecaLOX//616itrS15os7f/va3RU/UWSidTk+bD5RS7j44fw3gQgD/CSC/p7ID8Poyv37eWlpaYrndtWvXHvHvr3zlK3jPe96DE044AZdccglefPFFXH/99Tj33HOnzV7vvvtu7N27FwBwzz1HHszZOYc3velNeOqpp/Cud70LJ554Iu6++2584QtfwJNPPonbbrstlsdTSaa2F7/Un0ftedQ+65ZbbsE999yDD33oQzjxxBOxePHiyRNo3nfffZPXu/vuu/G+970P9957LxobG3HZZZcdcTtzOVHncccdh46OjnmdqLNQKpVCKpU64rJS+/OUO8HZC2Czc+65Mq+feAMDA5PnxhgZGcGll16KRYsW4e677558nfb888/Ha17zGvz93//95FvRNmzYgLvuugsA8Jvf/Ab/8R//gRNPPBE//3n2FF0HDhxAe3s7du/eja997WuT9/ee97wHTz31FJ5//nkcd9xxHh9p8hS2F//Un0fteSq6/ULeTTXFBz7wAVx88cX49re/jeeeew4f/OAH8Z//+Z94y1vegvXr109OBMfHx3H66adj/fr1uOKKK6bdzqJFi/Dud7+7rBN17t69GyeddNK8TtS5EOUeB+drAK50zj25oHubg7iPgzM8PIxly5YBAB544AGcfvrpeN3rXjfjCsuePXtw++23453vfCeuv/56DA0N4d5778XZZ5+Niy66CN/4xjfQ3NyMj370o1i3bh1GRkZw4YUX4k1vehPq6+tRV1eHo44q47iK+Q25cN+bYpdVsML24p/686g9T0W2j+Ft4gzlti92os7ZRHEcnJUAfmpm7QD6kH2ZyjnnYn+JKi5jY2OTwbu7uwGgrL21d+/ejWuvvRYPPPAA7rnnHqxZswYnnXTS5OeXLl2KH//4x/ibv/kb3HDDDfj6178OAFi5ciXe97734ZOf/GQMj6ayFLYX/9SfR+15KrJ9giYpC1Fu+2In6lyIcic4H1zwPSVM4WrKhg0bABye6BR68MEHj3h73NatW7F69WrcdddduOeee7B79+5p59g47bTTcMMNN8A5h6effhq33nor9u3bh0996lM444wz8Na3vjWmR1UZylrJktioP4/a86g9T7ntN23ahG9961vR3W+Z1+tFdifjvwDwDIA3IXu6hoq1aNHhud3LX/5yrFy5Evfffz/uuOOOycsfeughvPKVrzxi5yozw6tf/WrcfvvteOCBB/DqV7/6iNu99dZbcfzxx+OSSy6BmWHz5s1oamrCn/zJnwAAnnnmmZgfWfIVthf/1J9H7XnUnofVvtwJzlcBLAFwNoBxAPUAvhLTmLwYHR2d/Hjp0qX47Gc/C+cczj77bKRSKZx11ll49atfDTPD+9///iO+dvfu3bjjjjvwm9/8Brt37z7ic694xSuwevVqXHPNNdi1axfe//7347zzzsMnP/lJLF++HG94wxu8PL4kK2wv/qk/j9rzqD0Pq325E5wzAVwBYMI59yKyL1m9Lq5B+bBixYoj/v3ud78bN998M84880zcd999ePzxx/HKV74SN9xwA/7gD/7giOu+5jWvgXMOxx9/PHbs2HHE55YuXYpbb70V7373u/Hss8/iq1/9Kh566CG8+c1vxm233Yb169fH/dASb2p78Uv9edSeR+15WO3LfRfVHQA+BqDVOfdyM/t9AJc7586MbWAxv4uqq6sLtbW1sdz2ggTwLqrEtg+E+vOoPY/a88TZPop3UV0E4HMATjCzAwB+BuCPohogQ8UeD6EKqD2X+vOoPY/a87Dal/sSVT2AC51za5xzG51zb3XOPR3juGLX2dnJHkKw1J5L/XnUnkfteVjty53gpAA8YWbXmNm5ZnZMqSub2Xoze9DMnjCzd5vZaWZ2r5ndbmbrc9f5uJndZWZfWOiDmI8tW7Yw7lag9mzqz6P2PGrPw2pf1gTHOdfknNsG4CoAZwC4I3d045k0AfgEgAYA70N2B+UUgMsAfMTM1gLY7pzbDeBoM9s5/4cwP5lMxvddSo7ac6k/j9rzqD0Pq33ZRz4yszUAfg/AFgDLAJR639cNyJ5x/DgAzwM4wTn3LICfIvtyVwOAR3PXfRhA41wHvlB1dXW+71Jy1J5L/XnUnkfteVjty5rgmNmjAG4CsBHAZ5xz2wF8ZKbrO+ceAvBSAL8A8EMAz+UuHwcwAWA5sgcPRO7v35nn+OdNs3ketedSfx6151F7nkSu4JjZj3MfXgDgQefcFc65h3OXPV7i637HOdcBYA2AtwA4Pnd5DYBjABwEkN+tej2AoZluq6GhAfX19aivr0dDQwN27NiBXbt24ZRTTsGpp56K7du3T/7d0tKCtrY2OOfQ2dmJsbEx9PT0YHh4GP39/RgYGMDQ0BB6e3tx4oknoqurCxMTE2hvbwdw+JuQ/7ujowPj4+Po7u7GyMgI+vr6MDg4iMHBQfT19WFkZATd3d0YHx9HR0dH0dtob2/HxMQEurq6MDo6it7eXgwNDWFgYAD9/f0YHh5GT08PxsbGpu2INXWjmO0xjY6OHvGYai+/ccY/Ph+Tcw5tbW2Tt1FXV1f292nqY0rK92nqYwJQMY/pd3/3d6vuMVXK96murq7qHlOlfJ9OOumkqntMlfJ9Wr58+Zwe0759+9DY2IidO3dO/vzfuXMnGhsbp80BSil5HBwza3fObcl9/DPn3MuLfa7I130HwF8BaAdwF7JHP/5DACcDeAeAzwC4yjl3vpldDeCLzrnHp9xGrMfB6ejowObNm2O57QWJ8Dg4tZffOOPnuvadO9eRRSax7QOh/jxqz6P2PHG2j+I4OED2DOKFSs08PgfgewBeQPaUDvcBSOf+/S7n3C9z77C6C8BjUyc3PuRPsBmCwslMqUmPLyG1TyL151F7HrXnYbWfbYLjZvi49Bc5dw+yOyQXOnPKdZoBNJd7m1Hr6+vTBj+DuFd+Et0+v1pW9HPVcSTpRPevcmrPo/Y8rPazTXDWmdlPkF29OTH3MXL/flmsI4vZypUr2UMIltpzqT+P2vOoPQ+r/WwTnKp9X93IyAiWLl1a8jpJ3YfFl7he2iqnPV2xfaCqREX0r1Jqz6P2PKz2JSc4zrluXwPxbfHixewhBEvtudSfR+151J6H1X4uOxkHK2k76YqIiEhpZR/JuNqMj4+zhxAstedSfx6151F7Hlb7YCc4ei2WR+251J9H7XnUnofVPtgJzuDgIHsIwVJ7LvXnUXsetedhtQ92H5w1a9awhxCpSto3qNraVxr151F7HrXnYbUPdgWnu7tq3yCWeGrPpf48as+j9jys9sGu4FTrOUlmOz5PV82F2Q+ai3zS05F6q7V9pVB/HrXnUXseVvtgV3BYp29fiKlnBK9Uldi+mqg/j9rzqD0Pq33iV3CampqmXZZKpZBKpRZ0u3V1VXuQ5vIQj9QbfHsy9edRex6154mqfTqdRjqdLvv6iZ/gtLS0xHK7mUym4jb4/MtPiV69KeNklUXbB3CSy6SoxG2/Wqg9j9rzRNW+2OJGa2vrjNcP9iUqbeg8as+l/jxqz6P2PKz2wU5w2tvb2UOobs0HD/+ZomT7El8n0dC2z6P2PGrPw2of7ARn06ZN7CEES+251J9H7XnUnofVPvH74MSiefnMD1wrB0VF+fbynp4e1NbWLnRIMk/V2L/UfmmzHTrBp2psXynUnofVPtgVHOFZvXo1ewhBU38etedRex5W+zBXcPKIb5WuWBE0GxoawpIlSyIakMxVNfcvXK1J4rsNq7l90qk9D6u9VnDEOz3JcKk/j9rzqD0Pq33YKzhsga4aTUxMsIcQNPXnUXsetedhtdcKjnh36NAh9hCCpv48as+j9jys9lrBSYLA3rlVU1PDHkLQ1J9H7XnUnofVXis44t3w8DB7CEFTfx6151F7HlZ7TXDEu1WrVrGHEDT151F7HrXnYbXXBEe86+3tZQ8haOrPo/Y8as/Daq99cKpZQt+ltXHjRvYQgqb+PGrPo/Y8rPaJn+A0NTVNu6zYKdOlcuzfvx/btm1jDyNY6s+j9jxqzxNV+3Q6jXQ6Xfb1Ez/BaWlpYQ+h8hW8Syt/dNcu0lAA6EmGTP151J5H7Xmial9scaO1tXXG62sfHPEuk8mwhzCr2stvnPxTbSqhf7VSex6152G1T/wKjlSfurq6OV2/2CQjSWeIrjRz7S/RUXsetedhtdcKjnjX1tbGHsKsuvadO/mn2lRC/2ql9jxqz8NqrxWcClapL59s3bp1Ttef6xmiS12nGicsczXX/hIdtedRex5We63giHcHDhxgDyFo6s+j9jxqz8NqrxWcOJQ6/kwE552q9FWItWvXermfua78hMJXf5lO7XnUnofVXis44t3AwAB7CEFTfx6151F7HlZ7reDEqXC1JqFHFWZYtmwZewhBU38etedRex5We01wxJ/cJG9yU4/g5TqZu7GxMT3Zk6g9j9rzsNprgiMSmKOO0ivTs5lpn62F7v+m9jxqz8NqrwmOxG/qSo1erqNatEj/7VnUnkfteVjt9R0PVOFvqF01pEFookMxOjqKFStWsIdREfIrNlG9C0/tedSeh9VeE5wo6Ae1VJAkP8lX+0Eak9y+2qk9D6t94ic4TU1N0y4rdkZRKU/RHxLNnsdwyeOora31e6cyqb+/X/1J1J5H7Xmiap9Op5FOp8u+fuInOC0tLewhlE/vCirLunXr2EMIWiX0r9aDNFZC+2ql9jxRtS+2uNHa2jrj9bVbuXjX2dnJHkLQ1J9H7XnUnofVPvErOFJ9tmzZMu+v7aq5MPtBc5FPagWtLAvpLwuj9jxqz8NqrxUc8S6TybCHEDT151F7HrXnYbXXCo54V1dXt/Ab0Wkw5i2S/jIvas+j9jys9lrBkWm6ai7MvhTUvPzwnwjpNyku9edRex6159EKTijiWm2ooFUM/SbFpf48as+j9jxawZHkaT44+ad27DrUjl0Xyc12dHREcjsyP+rPo/Y8as/Daq8VnKkKVkIOn8Iggnfn+HqHD+GdRHM97cOGDRtiHI3MRv151J5H7XlY7TXBqSRTX4aqgMlMMX19fYl4sil2ALkoz8uV1NMOJKW/L0W/z6T+obVPErXnYbXXBCev2GShgvZrYTrih0Xz7NdfuXJlbGOR2ak/j9rzqD0Pq70mOBGa+ptiVL8l5vd9mbw9wo7KUZ7DamRkBEuXLp3fF8dgrhO0kv2LTJSTdtqBpPWfsyL9i72cXGybZfev+PYVTO15WO01wRHvFi9ePLcv0EpapMrtn9SX2CrZnLd9iYza87Daa4ITofyTPvu3xLmaukKUH38Xa0CVQgcb5FJ/ESlBExyiBf+GXKFP6uPj42Vdb9pLc9DkKwrl9s9L2ktslWyu7SU6as/Dap/4CU5TU9O0y4qdMl0qh14H51J/HrXnUXueqNqn02mk0+myr5/4CU5LSwt7CEVF8Xbpya8v8htyyd+UK+ys2XP5rT/R+3ZU6IrZVIODg/E+2c9xJ+yQxN5eZqT2PFG1L7a40draOuP1dSRjkcCsWbOGPYRgqT2P2vOw2id+BSdpony7dNm3XyXyj62jowObN28+4nNJ3rej2L5Alay7u3ta/1hoJ+BpvLWXadSeh9VeExzxTk8yXOo/u66aC7MfNOf/nf/Mwl5iU3setedhtdcERyZFuYpS6rYymcyMZ5dN8kpOtSjVP0jzXF2az7sg1Z5H7XlY7bUPjninJxku9Z+D5oOR7hit9jxqz8NqrxUciWXfklK3WWw2H/f+LVNfcshelv8ouh9glbACpd9kZ1AwkZnL8ZbmcpwgtedRex5We01wxDs9yURjvgeKVH8etedRex6t4Egw2tvbsWXLFs6dx/zOnkp4pxW1f+DUnkfteVjtNcGRhZvjRGHTpk0xDST5ir1UNmme+3rM9VQKIfdnU3setedhtdcER7zr6elBbW0texjBUv/4zDaBVXsetedhtY9tgmNmSwB8H8BqAA8COADgLQAmAFzvnLvazD4O4CwAjzvnPhjXWCQm81xxWL16dcQDqUDEg+CpP4/a86g9D6t9nCs4FwC4zTn3aTP7EoCzAbzBOfcCAJjZWgDbnXO7zeyLZrbTOfd4jOORhBgaGsKSJUvYw4hHsclKws6/RO1P7lNyhSVKM0xgq3rbTzi152G1j/M4OE8B+Gbu477c39eY2Y/MrBZAA4BHc5c/DKAxxrFIguhJhkv9edSeR+15WO1jW8Fxzt0PAGb2TgCvAnAjgKsA7AbwKQA/ANCbu3ovAL2HLxATExPsIUSu6PmqEnr+JUr/Yqs0zD6kVbVq3PYrhdrzsNrHeiRjM/s7AG8EcJ5z7krn3PPOuR8BWIvs0dXW5a66HsBQsdtoaGhAfX096uvr0dDQgB07dmDXrl045ZRTcOqpp2L79u2Tf7e0tKCtrQ3OOXR2dmJsbAw9PT0YHh5Gf38/BgYGMDR0+G66urowMTGB9vZ2ANmDERX+ndfd3Y2RkRH09fVhcHAQg4OD6Ovrw8jICLq7u4+47tSvbW9vx8TEBLq6ujA6Oore3l4MDQ1hYGBg8jo9PT0YGxtDZ2cnnHNoa2s74rbKeUy9vb0YHR2d9TF1dHRgfHx81sc0Pj6Ojo6OordR6jH19/djeHi45GM6dOjQgh7TTK3zjymv8DHlTX1MU79PefP5PgE44jHllbPtTX1M5Xyfyn1MU79Pq75wUnZyUeTPfB7T1O/T1Mcy02PKm+tjyit8THmzbXvFHlM5zxEzPSYAc3pMhw4divz/E1B9zxF6TNX1mJ555pk5PaZ9+/ahsbERO3funPz5v3PnTjQ2Nk6bA5RizrmSV5gvM9sL4HTn3GVmdjSANIC3AtgG4H8B+CiAq5xz55vZ1QC+WLgPjpk5IPtEFLn8b46z/RY3z+tNHgV1lmOilHu9ajM8PIxly5bN62uLNiunf7HvZZmXlfN9ivo+y1HsPsvapkqtnMzyuOd0+/P4/1XWfS6kYZnXK+c+5/M9X8i2Lwuj9jxxtjczAIBzzqZ+Ls6djF8B4PVmdlvu37cDeBzA8wDe6Zz7pZk9YWZ3AXhMOxiHQ080CUF8J9dceNsx2ANt+zxqz8NqH+c+OB8D8LEpF398ynWaURVPWzIXq1atiueGcz+kJ88x1RzP3UjECiZXcZwfbDZxnD+s8DYPP6YYt32ZldrzsNrrQH/iXW9vr44qKnOXsLfbz4e2fR6152G11wQnp9hvcYW/eUl0Nm7cGO0NTvnBV3I/jmjvWRaC+M6qov/fI9wX7sj9cg5/GPm2L2VTex5We01wxLv9+/dj27ZtC7qNuH9ASWkV0T+B+xVFse3L/Kg9D6u9JjhTzPSbl0RHTzLCxpqMadvnUXseVntNcGJUEb/lEmQyGdTVze+4jsX6xbGTqBR/99LhHbinv106sRK0785Ctn1ZGLXnYbWP9UB/IsXoSUZCpW2fR+15WO21ghMDrTKU1tbWFsuSpRrHpEKOl1MJ4tr2ZXZqz8NqrwlOOSrgDNGVZOvWrewh+FWNkwLysWsqVXDbfoKoPQ+rvSY44t2BAwciPSaC9muSShH1ti/lU3seVntNcEpJ2hmQq8TatWvZQ/CjyPaT9OPxzHQE3kn6P7EgwWz7CaT2PKz2muCIdwMDA1i3bt3sVxRJmgW+NKdtn0fteVjtEz/BaWpqmnZZKpVCKpUijEaioBPeJZeOAxUvbfs8as8TVft0Oo10Ol329RM/wWlpaWEPIVJ6pw8wNjamJ5sipm4bUe1bNO12dQqSOasduw7A1Ang3F+a07bPo/Y8UbUvtrjR2to64/UTP8GR6nPUUTr8ksxdXBNAn7Tt86g9D6u9JjieVOKTcVwWLdJmV0x+G4lrlW9yG2yO5ealDNr2edSeh9VeU1rxbnR0lD0EiUPz8ljfUdW179yK/0VB2z6P2vOw2mtKK96tWLGCPQSpVgl/y7q2fR6152G11wRHvOvv70dtbS17GBKRojvgSlHa9nnUnofVXhMc8U7HokiwhK+AzKRSJlna9nnUnofVXvvgiHednZ3sIYhQaNvnUXseVnut4Ih3W7ZsYQ9BpqiUFZBEmsOql7Z9HrXnYbXXBEe8y2QyqKuro9z3rOdamuNtMMdRSUo1C2lSNdO2X3afUpOpYucJk0nM553QsdprgiPe6UlGqsF8Vr207fOoPQ+rvSY44h1jNl/0h1Dz3G4jiiPpznscRX5zn8/JHtkKH3+Ipy2Zbdsvu0/hak2F7hjum1ZweLSCI8HQk8wMcj+oKnHiUijEiUu55rPth/ZyZlz0vMOjFRwJRkdHBzZv3sweRtkStY+IfnOvaJW27VcTtedhtdcER7zbsGEDewjJMnXn0IgnLl01F+ZuN9Kbnf1+kzQxTIi5bPtRvKwqh+l5h4fVPvETnKampmmXFTtlulSOvr6+ZD3ZaCWkIjFeClvofca67RfbjvXOqkmJe94JSFTt0+k00ul02ddP/ASnpaWFPQSJ2MqVK9lDCFPuh13+h3QXcSih0rbPo/Y8UbUvtrjR2to64/UTP8GR6jMyMoKlS5eyh6HfbisU46WvqO4zlm2/2HasVclpEvO8EyBWe52qQbxbvHgxewgiFNr2edSeh9VeKzgikjxagRCRBdIER7wbHx9nD0HEv+blmLonwuTRkEu9000vpUZCzzs8rPaa4Ih3eh1cZqKTfkpc9LzDw2qvCY54Nzg4qCcbmVTtRz4unLR1d3dn3y6bP2p1fiLXnLuyDuQYGz3v8LDaa4Ij3q1Zs4Y9BBGKqLb9YpPCUqteOpu7nneYWO01wRHvuru7dch0CeYHayFt+zxqz8NqrwmOeKcnGQlVVNv+fM/KHvLZ3PW8w8Nqr+PgiHeZTIY9hIpVe/mNk3+k8mjb51F7HlZ7TXDEu7q6OvYQRCi07fOoPQ+rvV6iEu8ymYyebMpQuErTVZP7u3C/lWa/45GF07bPo/Y8rPaa4MyX3sI5b3qSkVBp2+dRex6t4Mygqalp2mXFzigqlaO9vR1btmxhDyPxtFpTfbTt86g9T1Tt0+k00ul02ddP/ASnpaWFPYQj6bDpC7Zp0yb2ECqDVgmrjrZ9HrXniap9scWN1tbWGa+vnYzFu56eHvYQRCi07fOoPQ+rfeJXcKT6rF69mj2EZKvQVUK9db20w31+NrnTuPij5x0eVnut4Ih3Q0ND7CGISGD0vMPDaq8VHPFuyZIl7CFIhEI85cJcFPYZGhrCihUrtNM4gZ53eFjttYIj3k1MTLCHIEKhbZ9H7XlY7TXBEe8OHTrEHoIIhbZ9HrXnYbXXBEe8q6nRHpYSJm37PGrPw2of9D44etcHx/DwMJYtW8Yehoh32vZ51J6H1V4rOOLdqlWr2EMQodC2z6P2PKz2Qa/g6N0fHL29vTqqqARJ2z6P2vOw2msFR7zbuHEjewgiFNr2edSeh9U+6BUc4di/fz+2bdvGHkb1KDhnVf4IubWXXzftMuGbtu3rfGPe6HmHh9VeKzjinZ5kJFTa9nnUnofVXis44l0mk0FdXR17GJWv2DmrcisCR+xf1uxnODK7yW2/Qs83Vsn0vMPDap/4CU5TU9O0y4qdMl0qh55kJFTa9nnUnieq9ul0Gul0uuzrJ36C09LSwh6CRKytrU3LxXHTvh2JpG2fR+15ompfbHGjtbV1xutrHxzxbuvWrewhiFBo2+dRex5W+8Sv4Ej1OXDggI5HERft25Fo2vZ51J6H1V4THPFu7dq17CEIdKoSBm37PGrPw2qvl6jEu4GBAfYQRCi07fOoPQ+rvVZwxDud8I7rib/cre8BibrzqD0Pq71WcMS7sbEx9hCCpv48as+j9jys9lrBEe+OOkrzaib156nE9qX21aqkExZXYvtqwWqv77h4t2iR5tVM6s+j9jxqz8Nqr++4eDc6OooVK1awhxEs9edJUvuumguzHzQX+WSRww0UrtZU4jvwktQ+NKz2WsER7/Qkw6X+PGrPo/Y8rPaxTXDMbImZ/cjMHjOzFjM7zczuNbPbzWx97jofN7O7zOwLcY1Dkqe/v589hKCpP08i2zcfPPyniiWyfSBY7eN8ieoCALc55z5tZl8C8BkAKQCbAXzEzD4LYLtzbreZfdHMdjrnHo9xPJIQ69atYw8haOrPE2f7wpeNumpiu5uKpe2eh9U+zpeongLwzdzHfQBe55x7FsBPAdQDaADwaO7zDwNojHEskiCdnZ3sIQRN/XnUnkfteVjtY1vBcc7dDwBm9k4ArwLwk9zl42Y2AWA5gN7c1XsB6Fz2gdiyZQt7CEFTf5442hd9q3Zz5HdT8bTd87Dax7qTsZn9HYA3AjgPwPG5y2oAHAPgIID8utV6AEPFbqOhoQH19fWor69HQ0MDduzYgV27duGUU07Bqaeeiu3bt0/+3dLSgra2Njjn0NnZibGxMfT09GB4eBj9/f0YGBjA0NDhu+nq6sLExATa29sBAJlM5oi/Ozo6MD4+ju7uboyMjKCvrw+Dg4MYHBxEX18fRkZG0N3djfHxcXR0dBS9jfb2dkxMTKCrqwujo6Po7e3F0NAQBgYG0N/fj+HhYfT09GBsbAydnZ1wzqGtre2I2yjnMfX29mJ0dLQiHlMmk6m6x1RJ36dHHnmk6h5TpXyf8tt/OY8pr/Ax5c32mPLyjymv8DHlTR0PgCMeU17hY8qrpO/Tk08+GfS2x3xMDz744Jwe0759+9DY2IidO3dO/vzfuXMnGhsbp80BSjHnXMkrzJeZ7QVwunPusty/fwDgYgAnA3gHsvvkXOWcO9/MrgbwxcJ9cMzMAUAs42tenvu7uneqE5EKVux5qtznrinXy++fc8RqT5m3X+xri96eCIGZAQCcczb1c3HuZPwKAK83s9ty/24GkAbwAoB3Oed+aWZPmNldAB7TDsbhyGQyqKvTK5Is6s9TMe3zEx0U7rBc2b8QVkz7KsRqH+c+OB8D8LEpF5855TrN0KvFwdGTDJf686g9j9rzsNrrQH/iXf71YOFQf57Ety88Jk6VHRsn8e2rGKu9TtUg3m3YsIE9hKCpP8+82he8XCTzp+2eh9VeExzxrq+vT082ROrPk8T2xc4rVY07DyexfShY7TXBEe9WrlzJHkLQ1J9nTu2r6OWhJNB2z8NqrwmOeDcyMoKlS5eyhxEs9edJYvtKP0t4uZLYPhSs9trJWLxbvHgxewhBU38etedRex5We63giIhUqfmuyOjEnVINNMER78bHx9lDCJr68/hu31Vz4ZRLwt2vR9s9D6u9JjjinV4H51J/nqS3r+YTdya9fTVjtdcER7wbHBzUkw2R+vN4az/1HVg6lo62eyJWe+1kLN6tWbOGPYSgqT+P2vOoPQ+rfeJXcJqamqZdlkqlkEqlCKORKHR3d2Pz5s3sYQRL/XnUnkfteaJqn06nkU6ny75+4ic4LS0t7CFIxPQkw6X+PGrPo/Y8UbUvtrjR2to64/X1EpV4l8lk2EMImvrzqD2P2vOw2muCI97V1dWxhxA09edRex6152G1T/xLVFJ9MpmMnmyI1J9H7een1AELyz0xqNrzsNprBUe805MMl/rzqD2P2vOw2muCI961t7ezhxA09edR+4Xp2nfu5J+5UnseVnu9RCXebdq0iT2EoKk/T9W2L3UgwakHHSSp2vYVgNVeKzjiXU9PD3sIQVN/HrXnUXseVnut4Ih3q1evZg8haOrPU/XtC1drEnZ6iKpvn2Cs9lrBEe+GhobYQwia+vOoPY/a87Daa4Ij3i1ZsoQ9hKCpP4/a86g9D6u9Jjji3cTEBHsIQVN/HrXnUXseVntNcMS7Q4cOsYcQNPXnUXsetedhtdcER7yrqalhDyFo6s+j9jxqz8Nqr3dRiXfDw8NYtmwZexjBUn8eevuEvbPJJ3r7gLHaJ36C09TUNO2yYqdMl8qxatUq9hCCpv48as+j9jxRtU+n00in02VfP/ETnJaWFvYQJGK9vb06qiiR+vPQ2ifkaMJM2u55ompfbHGjtbV1xutrHxzxbuPGjewhBE39edSeR+15WO01wRHv9u/fzx5C0NSfR+151J6H1V4THPFu27Zt7CEETf151J5H7XlY7TXBEe8ymQx7CEFTfx6151F7HlZ7TXDEu7q6OvYQgqb+PGrPo/Y8rPaa4Ih3bW1t7CEETf151J5H7XlY7RP/NnGpPlu3bmUPIWjqz1Mt7btqLsx+0EwdxpxUS/tKxGqvFRzx7sCBA+whBE39edSeR+15WO21giPerV27lj2EoKk/T9W1r6ADCFZd+wrCaq8VHPFuYGCAPYSgqT+P2vOoPQ+rvSY44p1OeMel/jxqz6P2PKz2muCId2NjY+whBE39edSeR+15WO21D454d9RRmlczqT9PiO1rL79x2mVd+871Po4Q2ycFq33iJzhNTU3TLit2RlGpHIsWJX6zq2rqz6P2PGrPE1X7dDqNdDpd/v1Gcq8xamlpYQ9BIjY6OooVK1awhxEs9eep6PbNy+f1ZYWrNcVWc3yp6PYVLqr2xRY3WltbZ7y+1uzEOz3JcKk/j9rzqD0Pq33iV3Ck+vT396O2tpY9jGCpP09Fti9yrJv8SkyX56EsREW2rxKs9lrBEe/WrVvHHkLQ1J9H7XnUnofVXhMc8a6zs5M9hKCpP4/a86g9D6u9Jjji3ZYtW9hDCJr686g9j9rzsNprgiPeZTIZ9hCCpv48as+j9jys9prgiHd1dXXsIQRN/XnUnkfteVjtNcER7/SbFJf686g9j9rzaAVHgqHfpLjUn0ftedSeRys4EoyOjg72EIKm/jxqz6P2PKz2OtCfeLdhwwb2EIKm/jzV1n7qqRcYJ9EsV7W1rySs9lrBEe/6+vrYQwia+vOoPY/a87DaawVHvFu5ciV7CEFTf55qaT91pYZ5Es1yVUv7SsRqrxUc8W5kZIQ9hKCpP4/a86g9D6t94ldwmpqapl1W7JTpUjkWL17MHkLQ1J9H7XnUnieq9ul0Gul0uuzrJ36C09LSwh6CiIiUofClqq4a4kCkKhVb3GhtbZ3x+nqJSrwbHx9nDyFo6s+j9jxqz8Nqn/gVHKk+S5cuZQ8haOrPU63ti749vNn7MEqq1vaVgNVeKzji3eDgIHsIQVN/HrXnUXseVntNcMS7NWvWsIcQNPXnUXsetedhtdcER7zr7u5mDyFo6s+j9jxqz8Nqr31wxLvNmzezhxA09ecJvX1XzYXZD5qLfLL5YKz3HXp7JlZ7reCId5lMhj2EoKk/j9rzqD0Pq71WcMS7uro69hCCpv48ap9TuFrTvNzLXao9D6u9JjjiXSaT0ZMNkfrzqP3Mip3PKsqzk6s9D6u9XqIS7/Qkw6X+PGrPo/Y8VbmCY2YG4LvOub1m9jEAbwEwAeB659zVZvZxAGcBeNw598E4xyLJ0d7eji1btrCHESz15wmyfZkvQRWu1uRXc6I8S3mQ7ROC1T62CY6ZbQDw7wCOzl20A8AbnHMv5D6/FsB259xuM/uime10zj0e13gkOTZt2sQeQtDUn0ftedSeh9U+tgmOc67bzHYCyE/B1wC4xsxWAmgC8HIAj+Y+9zCARgCa4ASgp6cHtbW17GEES/15gmpf5G3f+RWZrlm+NMp9b/KCap8wrPaxvkTlnHvRzFzunzcCuArAbgCfAvADAL25z/UC0AukgVi9ejV7CEFTfx61z2KcdVzteVjtve1k7Jy70jn3vHPuRwDWAjgIYF3u0+sBDBX7uoaGBtTX16O+vh4NDQ3YsWMHdu3ahVNOOQWnnnoqtm/fPvl3S0sL2tra4JxDZ2cnxsbG0NPTg+HhYfT392NgYABDQ4fvpqurCxMTE2hvbwdw+L36+b87OjowPj6O7u5ujIyMoK+vD4ODgxgcHERfXx9GRkbQ3d2N8fFxdHR0FL2N9vZ2TExMoKurC6Ojo+jt7cXQ0BAGBgbQ39+P4eFh9PT0YGxsDJ2dnXDOoa2t7YjbKOcx9fb2YnR0tCIe09DQUNU9pkr6Pv3iF7+ousdUKd+noaGhqntMc/k+lTLXx5RX7mMaGBgIettjPqbOzs45PaZ9+/ahsbERO3funPz5v3PnTjQ2Nk6bA5RizrmSV1goM7sJwFsBpHN/bwPwvwB8FMBVzrnzzexqAF8s3Acnv/ITy/jyO73FfORMKW5oaAgrVqxgDyNY6s+j9kXM8/l48uWuMl/OUnueONtn38sEOOds6ue8HAcn91LVdcjuY/M8gHc6535pZk+Y2V0AHtMOxuGYmJhgDyFo6s+j9jxqz8NqH/sExzl3Tu7vbwD4xpTPNaP4WUmkih06dIg9hKCpP4/a86g9D6u9DvQn3tXUeNqrUIpSfx6151F7HlZ7napBvBseHsayZcvYwwiW+vOofQnFDggY4X6Sas/Daq8VHPFu1apV7CEETf151J5H7XlY7TXBEe96e3tnv5LERv151L6I5oPT/8RA7XlY7TXBEe82btzIHkLQ1J9H7XnUnofVXhMc8W7//v3sIQRN/XnUnkfteVjtNcER77Zt28YeQtDUn0ftedSeh9VeExzxLn9YbuFQfx6151F7HlZ7TXDEu7o6nVeVSf151J5H7XlY7TXBEe/yJ2sTDvXnUXsetedhtdeB/sS7rVu3socQNPXnUfs5mnrwvwW8hVzteVjtEz/BaWpqmnZZKpVCKpUijEaicODAAWzatIk9jGCpP4/a86g9T1Tt0+k00ul02dc359yC7zQOZuYAIJbx5X8riOmAUlLa2NiYzgtDpP48aj9PRZ6zay+/EQDQte/csm5C7XnibG9mAADnnE39nPbBEe8GBgbYQwia+vOoPY/a87Daa4Ij3umEd1zqz6P2PGrPw2qvCY54NzY2xh5C0NSfR+151J6H1V4THPHuqKO02TGpP4/a86g9D6u9vuPi3aJFiX/zXlVTfx6151F7HlZ7fcfFu9HRUaxYsYI9jGCpP4/ax2zqcXMKjDZl1J6Etd1rBUe805MMl/rzqD2P2vOw2msFR7zr7+9HbW0texjBUn8etY9e/ng4ANCVP9RK4THOcqs6as/Daq8VHPFu3bp17CEETf151J5H7XlY7bWCI951dnZiy5Yt7GEES/151D46RY9g3Dzz9dWeh9VeKzjinZ5kuNSfR+151J6H1V4THPEuk8mwhxA09edRex6152G11wRHvKurq2MPIWjqz6P2PGrPw2qvCY54p9+kuNSfR+151J6H1T7xOxk3NTVNuyyVSiGVShFGI1HQb1Jc6s+j9n4Ue+u42vNE1T6dTiOdTpd9fXPORXLHUTMzBwCxjC9/tMvCYyWINx0dHdi8eTN7GMFSfx61n6dyn7Nz16sdu27yoq6aCwEAHRc9ovYkcW73ZgYAcM7Z1M8lfgVHqs+GDRvYQwia+vOovR9HvIW8OfuX2vOw2msfHPGur6+PPYSgqT+P2vOoPQ+rvSY44t3KlSvZQwia+vOoPY/a87Da6yUq8W5kZARLly5lDyNY6s+j9jxLr3zZ9Au1H6YXrO1eKzji3eLFi9lDCJr686i9hIi13WsFR0REqldulWZwcPDwSyX5d2VJVdMER7wbHx9nDyFo6s+j9jxRtC88vs5URU/+WUqpSVaVvXTG2u71EpV4p30QuNSfR+151J6H1V4rOOLd4OCgnmyI1J9H7Xnm2r7c1ZpS1ytL4WpNlb50xtrutYIj3q1Zs4Y9hKCpP4/a86g9D6u9VnDEu+7ubh0ynUj9edSeZ77t57xvjUzD2u61giPe6QmeS/151J5H7XlY7TXBEe8ymQx7CEFTfx6151F7HlZ7vUQl3tXV1bGHEDT151H7CM1xh9yi7afeRpW9PTspWNt94ic4TU1N0y5LpVJIpVKE0UgUMpmMnuiJ1J9H7XnUnieq9ul0Gul0uuzrJ36C09LSwh6CRExPMlzqz6P2MShz1aWwfe3YdQAKdiCu0rdnJ0VU232xxY3W1tYZr699cMS79vZ29hCCpv48as+j9jys9olfwZHqs2nTJvYQgqb+PGrPU6x9/iB9XTW+RxMW1navFRzxrqenhz2EoKk/j9rzqD0Pq71WcMS71atXs4cQNPXnUXuewvbTDt7XHPOdM/bxSdDJPFnbvSY44t3Q0BCWLFnCHkaw1J9H7Xmqqv1Mk5eEvs2d1V4THPGuap5kKpT686g9TyLaMyYgCTiZJ6u9Jjji3cTEBHsIQVN/HrVfoAX8gK7K9vnJS8Lf5s5qr52MxbtDhw6xhxA09edRex6152G11wqOeFdTo/dkMqk/j9rPUwQv7ag9D6u9Jjji3fDwMJYtW8YeRrDUn0ftecppnz8ujkSLtd3rJSrxbtWqVewhBE39edSeR+15WO21giPe9fb26oiuROrPo/Y85bSfdnwciQRru9cER7zbuHEjewhBU38eteeJq31XzYXZD5qLfHKe+w4Ve6ksyslX3Lc/FWu7T/wEp6mpadplxc4oKpVj//792LZtG3sYwVJ/HrXnUXueqNqn02mk0+myr5/4CU5LSwt7CBIxPclwqT+P2vPE3j7CA+oVrqbEseNz3Lc/VVTtiy1utLa2znh97WQs3mUyGfYQgqb+PGrPE0n75uXT/8isWNu9JjjiXV1dHXsIQVN/HrXnUXseVvvEv0Ql1aetrU1L9UTqz6P2PHNuX+bZuPMv8XQVudrk5xZwnLuSOzFXCNZ2rwmOeLd161b2EIKm/jxqzxN3+8J9WRYyoYlaEsbF2u41wRHvDhw4oGOBEKk/j9rzzLv9Ak4TMbkzb/O8byKScbCxtntNcMS7tWvXsocQNPXnUXueuNoXPX5M8+xfV/RYNDGssBwxvubob78crO1eExzxbmBgAOvWrWMPI1jqz6P2PGW1j/ldUQt5S7bvg/NFibXda4Ij3ulkg1zqz6P2PEltn4QVlrix2muCI96NjY0l9skmBOrPo/Y8Jdt72r9lISsuZR2cL6HH5WFt9zoOjnh31FHa7JjUn0ftedSeh9U+1hUcMzMA33XO7TWz0wD8A4BxAH/knPuFmX0cwFkAHnfOfTDOsUhyLFqkhUMm9edRe55qbH94Jee6Ga/T5WUkpbHaxzatMrMNAP4DQP7oPlcASAG4DMBHzGwtgO3Oud0AjjaznXGNRZJldHSUPYSgqT+P2vNQ2ut0DgB4231s0yrnXHdu0pKfYp7gnHvWzH4DYB+ABgCP5j73MIBGAI/HNR5JjhUrVrCHEDT151F7nmpqXynvnspjtY913cg596KZudw/n8tdNm5mEwCWA+jNfa4XgE4UEoj+/n7U1tayhxEs9edRex6v7SvooHwlTwUR0eNgbfc+9/w5HgDMrAbAMQAOAsi/MX49gKFiX9TQ0ID6+nrU19ejoaEBO3bswK5du3DKKafg1FNPxfbt2yf/bmlpQVtbG5xz6OzsxNjYGHp6ejA8PIz+/n4MDAxgaOjw3XR1dWFiYgLt7e0ADp/xNP93R0cHxsfH0d3djZGREfT19WFwcBCDg4Po6+vDyMgIuru7MT4+jo6OjqK30d7ejomJCXR1dWF0dBS9vb0YGhrCwMAA+vv7MTw8jJ6eHoyNjaGzsxPOObS1tR1xG+U8pt7eXoyOjlbEY1q3bl3VPaZK+j4dd9xxVfeYKuX7tG7duqp7TJXyfXrJS16S+MeUV/iY8qL4Pk29rXyvmUT1fTr66KPntO3t27cPjY2N2Llz5+TP/507d6KxsXHaHKAUc86VvMJCmdlNzrlzzOwHAC4GcDKAdwD4DICrnHPnm9nVAL7onHu84OscAMQyvvxrohU0y64m7e3t2LJlC3sYwVJ/HrXnqYj2xX42Rfnzqtzbj/hnZJzts+9lApxzNvVzPndtbgaQBvACgHc5535pZk+Y2V0AHiuc3Eh1S/yTTJVTfx6151F7Hlb72F+ics6dk/v7Yefcmc65Pc65X+Qua3bO7XbOfSjucUhy5JcjhUP9edSeR+0L5N/d5ekdXqz2OvKReFdXp/3JmdSfR+151J6H1V4THPFOv0lxqT+P2vOoPbL71Ez5Uzt2HWrHZj5QYBS0giPB0G9SXOrPo/Y8as+jFRwJxtS3LIpf6s+j9jxqz8NqrwmOeLdhwwb2EIKm/jxqz6P2PKz2muCId319fewhBE39edSeR+15WO01wRHvVq5cyR5C0NSfR+151J6H1V4THPFuZGSEPYSgqT+P2vOoPQ+rvSY44t3ixYvZQwia+vOoPY/a87Daa4IjIiIiVcfnuahEAADj4+PsIQRN/XnUnkftS6u9/MbJj7tqor1tVvvET3CampqmXZZKpZBKpQijkSgsXbqUPYSgqT+P2vOoPU9U7dPpNNLpdNnXT/wEp6WlhT0Eidjg4KCebIjUn0ftedS+uK59506/sDna+4iqfbHFjdbW1hmvn/gJjlSfNWvWsIcQNPXnUXueimrv6SzfvrDaaydj8a67u5s9hKCpP4/a86g9D6u9OecodzwbM3MAEMv48rPj5oPR37aIiEglq6CfkWYGAHDO2dTPaQVHvMtkMuwhBE39edSeR+15WO21giMiIiKHVdDPSK3gSKLoNyku9edRex6159EKzhRawRERESGooJ+RWsGRRGlvb2cPIWjqz6P2PGrPw2qvCY54t2nTJvYQgqb+PGrPo/Y8rPaa4Ih3PT097CEETf151J5H7XlY7TXBEe9Wr17NHkLQ1J9H7XnUnofVXhMc8W5oaIg9hKCpP4/a86g9D6u9Jjji3ZIlS9hDCJr686g9j9rzsNprgiPeTUxMsIcQNPXnUXsetedhtU/82cSbmpqmXVbslOlSOQ4dOsQeQtDUn0ftedSeJ6r26XQa6XS67OvrQH/i3fDwMJYtW8YeRrDUn0ftedR+DiL+GRlnex3oTxJleHiYPYSgqT+P2vOoPQ+rvSY44t2qVavYQwia+vOoPY/a87Daa4Ij3vX29rKHEDT151F7HrXnYbXXBEe827hxI3sIQVN/HrXnUXseVntNcMS7/fv3s4cQNPXnUXsetedhtde7qEREROSwCvoZqXdRSaJkMhn2EIKm/jxqz6P2PKz2WsERERGRwyroZ6RWcCRR2tra2EMImvrzqD2P2vOw2muCI95t3bqVPYSgqT+P2vOoPQ+rvSY44t2BAwfYQwia+vOoPY/a87Daa4Ij3q1du5Y9hKCpP4/a86g9D6u9Jjji3cDAAHsIQVN/HrXnUXseVntNcMQ7ndGXS/151J5H7XlY7RdR7nUOmpqapl2WSqWQSqUIo5EojI2N6cmGSP151J5H7Xmiap9Op5FOp8u+fuInOC0tLewhSMSOOkoLh0zqz6P2PGrPE1X7Yosbra2tM99vJPcqMgeLFiV+Xl3V1J9H7XnUnofVXhMc8W50dJQ9hKCpP4/a86g9D6u9Jjji3YoVK9hDCJr686g9j9rzsNprgiPe9ff3s4cQNPXnUXsetedhtdcER7xbt24dewhBU38etedRex5We01wxLvOzk72EIKm/jxqz6P2PKz2muCId1u2bGEPIWjqz6P2PGrPw2qvCY54l8lk2EMImvrzqD2P2vOw2ptzjnLHszEzBwCxjK95ee7vg9HftoiISCWroJ+RZgYAcM7Z1M9pBUe8029SXOrPo/Y8as+jFZwptIIjIiJCUEE/I7WCI4nS0dHBHkLQ1J9H7XnUnofVXhMc8W7Dhg3sIQRN/XnUnkfteVjtE3/2saampmmXFTujqFSOvr4+PdkQqT+P2vOoPU9U7dPpNNLpdNnX1z444t3IyAiWLl3KHkaw1J9H7XnUfg4i/hkZZ3vtgyOJMjIywh5C0NSfR+151J6H1V4THPFu8eLF7CEETf151J5H7XlY7TXBERERkaqjCY54Nz4+zh5C0NSfR+151J6H1V4THPFOO/pxqT+P2vOoPQ+rvSY44t3g4CB7CEFTfx6151F7HlZ7TXDEuzVr1rCHEDT151F7HrXnYbXXBEe86+7uZg8haOrPo/Y8as/Daq8Jjni3efNm9hCCpv48as+j9jys9prgiHeZTIY9hKCpP4/a86g9D6u9twmOmZ1sZj81s9vM7PtmdpqZ3Wtmt5vZel/jEL66ujr2EIKm/jxqz6P2PKz2PldwNgO4yjm3xzl3HoArAKQAXAbgIx7HIWT6TYpL/XnUnkfteap+BQfARgAXmNndZnYRgBOcc88C+CmAeo/jEDL9JsWl/jxqz6P2PCGs4DwN4H8ju2rzYQBjAOCcGwcw4XEcQtbe3s4eQtDUn0ftedSeh9Xe2wTHOXezc+4h59yvAdyL3KqNmdUAOGamr2toaEB9fT3q6+vR0NCAHTt2YNeuXTjllFNw6qmnYvv27ZN/t7S0oK2tDc45dHZ2YmxsDD09PRgeHkZ/fz8GBgYwNDQ0edtdXV2YmJiYjJ9fRsv/3dHRgfHxcXR3d2NkZAR9fX0YHBzE4OAg+vr6MDIygu7uboyPj6Ojo6PobbS3t2NiYgJdXV0YHR1Fb28vhoaGMDAwgP7+fgwPD6OnpwdjY2Po7OyEcw5tbW1H3EY5j6m3txejo6MV8Zg2bdpUdY+pkr5Py5cvr7rHVCnfp02bNlXdY6qU79P69eur7jHF9X3Ki+oxHXfccXN6TPv27UNjYyN27tw5+fN/586daGxsnDYHKMWccyWvEBUz+wSAHwJ4AMCPcxf/IYCTAbzDOffnU67vACCW8TUvz/19MPrblll1dXWhtraWPYxgqT+P2vOo/RxE/DMyzvZmBgBwztnUzy2K5R6L+yKAGwAsBvBPAB4BkAbwAoB3eRyHkK1evZo9hKCpP4/a86g9D6u9twmOc+6XAE6bcvGZvu5fkmNoaAhLlixhDyNY6s+j9jxqz8NqrwP9iXd6kuFSfx6151F7HlZ7TXDEu4kJvWmOSf151J5H7XlY7TXBEe8OHTrEHkLQ1J9H7XnUnofVXhMc8a6mpoY9hKCpP4/a86g9D6u9Jjji3fDwMHsIQVN/HrXnUXseVntNcMS7VatWsYcQNPXnUXsetedhtdcER7zr7e1lDyFo6s+j9jxqz8NqrwmOeLdx40b2EIKm/jxqz6P2PKz2muCId/v372cPIWjqz6P2PGrPw2rv7VxUc6VzUYmIiBBU0M/IUuei0gqOeJc/c6xwqD+P2vOoPQ+rvc+Tbc5LU1PTtMtSqRRSqRRhNBKFuro69hCCpv48as+j9jxRtU+n00in02VfXy9RiXdtbW3Ytm0bexjBUn8etedR+zmI+GdknO31EpUkytatW9lDCJr686g9j9rzsNprgiPeHThwgD2EoKk/j9rzqD0Pq70mOOLd2rVr2UMImvrzqD2P2vOw2muCI94NDAywhxA09edRex6152G11wRHvFu2bBl7CEFTfx6151F7HlZ7TXDEu7GxMfYQgqb+PGrPo/Y8rPaa4Ih3Rx2lzY5J/XnUnkfteVjt9R0X7xYtSvzxJaua+vOoPY/a87Daa4Ij3o2OjrKHEDT151F7HrXnYbXXBEe8W7FiBXsIQVN/HrXnUXseVntNcMS7/v5+9hCCpv48as+j9jys9prgiHfr1q1jDyFo6s+j9jxqz8NqrwmOeNfZ2ckeQtDUn0ftedSeh9VeExzxbsuWLewhBE39edSeR+15WO0T/765pqamaZelUimkUinCaCQKmUwGdXV17GEES/151J5H7Xmiap9Op5FOp8u+vjnnFnyncTAzBwCxjK95ee7vg9HftoiISCWroJ+RZgYAcM7Z1M/pJSrxLpPJsIcQNPXnUXsetedhtdcKjoiIiBxWQT8jtYIjidLR0cEeQtDUn0ftedSeh9VeExzxbsOGDewhBE39edSeR+15WO01wRHv+vr62EMImvrzqD2P2vOw2muCI96tXLmSPYSgqT+P2vOoPQ+rvSY44t3IyAh7CEFTfx6151F7HlZ7TXDEu8WLF7OHEDT151F7HrXnYbXXBEdERESqjiY44t34+Dh7CEFTfx6151F7HlZ7TXDEu6VLl7KHEDT151F7HrXnYbXXBEe8GxwcZA8haOrPo/Y8as/Daq8Jjni3Zs0a9hCCpv48as+j9jys9prgiHfd3d3sIQRN/XnUnkfteVjtF1HudQ6ampqmXZZKpZBKpQijkShs3ryZPYSgqT+P2vOoPU9U7dPpNNLpdNnX19nExbtMJoO6ujr2MIKl/jxqz6P2cxDxz8g425c6m7gmOCIiInJYBf2MLDXB0T444l0mk2EPIWjqz6P2PGrPw2qvFRwRERE5rIJ+RmoFRxKlvb2dPYSgqT+P2vOoPQ+rvSY44t2mTZvYQwia+vOoPY/a87Daa4Ij3vX09LCHEDT151F7HrXnYbXXBEe8W716NXsIQVN/HrXnUXseVntNcMS7oaEh9hCCpv48as+j9jys9prgiHdLlixhDyFo6s+j9jxqz8NqrwmOeDcxMcEeQtDUn0ftedSeh9VeExzx7tChQ+whBE39edSeR+15WO01wRHvampq2EMImvrzqD2P2vOw2muCI94NDw+zhxA09edRex6152G1X0S51zloamqadlkqlUIqlSKMRqKwatUq9hCCpv48as+j9jxRtU+n00in02VfX+eiEu86Ozt1VFEi9edRex61n4OIf0bG2V7nopJE2bhxI3sIQVN/HrXnUXseVntNcMS7/fv3s4cQNPXnUXsetedhtdcER7y788472UMImvrzqD2P2vOw2msfHPFu+/btePLJJ9nDCJb686g9j9rPQe5nZO3YdUdc3LXv3HndXJzttQ+OJIqOR8Gl/jxqz6P2PDoOjgRjbGyMPYSgqT+P2vOo/dx17Tt33qs2hVjtNcER7/SbFJf686g9j9rzsNon/kB/Un1eeOEF9hCCpv48as+j9vOQ2xena3J+Mr/9VlntK2oFZy5HMPQpynGFcFuLFy+O7LaS+hijvj31r47bUnvebak9D6u9JjgRSOoGmtTb+u1vfxvZbSX1MUZ9e+pfHbel9rzbUvs5aD6Ipt53ZN9pHMG7jVntqRMcMzvWzL5tZveY2SXMsYg/Rx99NHsIQVN/HrXnUXseVnv2Cs5eAHcD2A3gEjPTFhiApB57KRTqz6P2PGrPw2rPnuDsAvCwc+4QgF8A2EAej4iIiFQB6pGMzawFwKedcwfM7O8AXO+cezT3OU23RUREZFZJPJLxQQDrch+vBzDEG4qIiIhUC/ZxcB4GsMvM7gHwMgDd+U8Um42JiIiIlIO9gvN9AK9CdkfjrzjnJrjDERERkWqQ2LOJi4iIiMwXewVHREREJHKa4IiIiEjVCWKCM9MRk3Uk5fiVaH+ymf3UzG4zs+/zRlj9LOt7Uy7Ttu/BDO217cfIzJaY2Y/M7LHcoUjyl2ubj1mJ9pRtPogJDmY+YrKOpBy/mRpvBnCVc26Pc+481uCqnZltAPAfALZN+ZS2/ZiVaK9tP14XALjNOVcPwJnZq3KXa5uP30ztKdt8KBOcmY6YrCMpx2+mxhsBXGBmd5vZRbTRVTnnXDeAnQB+PuVT2vZjVqK9tv14PQXgm7mP+wou1zYfv5naU7b5UCY4ywH05j7uBfA7s1wu0Zmp8dMA/jeAFIAPm9lywtiC4Jx7EcDUt0tq2/dghvba9mPknLvfOddlZu9E9jAkD+Q+pW0+ZiXaU7Z59oH+fMkfMfkAjjxi8kyXS3SKNnbO3Zy/gpndC+BEAE8Qxhcqbfsk2vbjlzv1z0sAnFdwfDVt8x4Ua8/a5kNZwckfMfkoHHnE5Jkul+gUbWxmnzCzM3Ovg28H0MUbYpC07ZNo24+Xme0FAOfcJc65kYJPaZuP2UztWdt8EAf6M7NjAXwD2Y36S8i+9vodAJ2FlzvnrqENskqVaD8E4AYAiwH8k3PuS6wxhsDMbnLOnWNmfw1t+14VaT8EbfuxMbNPA3gjgN/kLrodwL9A23zsSrQfAmGbD2KCIyIiImEJ5SUqERERCYgmOCIiIlJ1NMERERGRqqMJjoiIiFQdTXBERESk6miCIyIiMgsze62ZfXWBt/EHZnZiVGOKi5kd8HAfrzCzbxS5/Aozu9jMzs8dNBBm9mfzuQ9NcERERPw4D0AteQyJ4Jx70Dk343mpnHPfdc5dlvvnh+dzH5rgiIiIzJOZ7TSzR83saTP7B8u6wsyuNLPHzCxjZmeY2ZuRPdv2tWa2xszONbM2M+sws/+Vu63XmtmXzezfzKzTzP5iyn2daGY/NLMbcp//m9zlJ5vZw2b2X2b2bTM72syONbOvmVmXmd1pZrW56x4ouL2v5u7z/8t93dO5VZXFBbd7X+7yb5rZkiKP/6tm1mxmD5pZjZn9wMx+YWYP5B4zcmP7rJk9ZWbfzd3fiWZ2W+7zTbnH8xCAHQUtvmpmVwBYZ2Y/MbO/NbN35T7/e2b241LfG01wRERE5u8qAO8AsA3ZE3r+99zlewC8AsAlAL7snPshgH8F8E5kz4vVAuANAF4O4HwzOy33dW8H8D4AuwH8VZH7exOATwCoA/DW3Nf9ae721iF71OBtudtoQ/ZM3n+b+/xMPghgyDl3EoAbAazNXf4PAP4+d/lg7n6KWeucewWAMwE87ZxbD+AKHF55OQHAr5xzJwP4VeHtmNk6AH8N4DQAZ+duY5Jz7uMAepxzrwfwfQC/n/vUBQCuL/GYgjnZpoiISKTM7HgAjciehgAAjgXQnvs47ZwbB/CAmR1vZssKvnQLgHbnXE/udtIATkf2BJT3OOd+mbt8sMjd/tw593DB152B7CkRmpH9mf6XzrlnzOwTAOoBXJz7uvESD+VMAJ/Pffx9AC/kPm4EcH7u4+8A+KCZ7QbwldxlZ+T+/i4AOOduza32/HdkJyDHFtzHd3J/fxvZCdW/5P59GoBbnXPP5h5TqVWZRwC8PHcKoD9AdkI0I63giIiIzM/RyE5U6pxzdciuqnwu97kXC673Io78eWtTbudQwef7ZrnPabfrnPs3AHuRXUG63cxOzY3tgoKxvbbIba0uuP88l/sz9eNDufu6yzl3cu7PQO5zzwOAmaWQPd+XQ3b1p9i4p7Y4NOV6U/99eGDZc0v9BNnVqV8554pNACdpgiMiIjIPzrkhAIvMrNHMFiH7EtRrcp9+q5ktMrNXAHghd10gO/HYD2CLmb2sYDXi3jLvdpOZ7ch93XkA7jezawGc5pz7NIAfILuyci9yqzdm9t8AfDH39SvNbJWZnVAw1nsBXJj7+PcB1OQ+fgxAKvfxO8oY49kA/i+yqzSvwJGvEu0tuJ37Cy5/CMAeMzvBzFZghlUZy54FHsiuMP0tZnl5CtAER0REpFzvMLNfFvxpBPBuAF9F9mzlbc65m3PX7QDwUwBfB/AnucvuB3A1gKUA/geAWwD8DMB3nXMPlTmGxwH8HbKTpJucc/cjux/Qp8zsF8i+LPUNAF8AsDa3U/GHAOR3WP4UshOVryA7IQOAfwKwwsyeRnZC82ju8v8J4KO5y1fm7qeUryG7uvIzAMcAWJbf0RjAybnbeVlubAAA51wvgL9BdqJzC4DvFbndO5GduAHAHciu8vzbLGPR2cRFRESilHvnT5dz7pqIb/dEAF9zzu2J8nbjZmYHnHMbI7qtMwD8hXNu72zX1U7GIiIiknhm9iZkV5vOK+v6WsERERGRaqN9cERERKTqaIIjIiIiVUcTHBEREak6muCIiIhI1dEER0RERKqOJjgiIiJSdf4fvXj9SRWUZYYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from helpers import *\n",
    "\n",
    "dfleading=df[['JPsiLepton_1_pt','JPsiLepton_1_eta']].rename(\n",
    "    columns={'JPsiLepton_1_pt':'JPsiLepton_pt','JPsiLepton_1_eta':'JPsiLepton_eta'}\n",
    ")\n",
    "dfleading['JPsiLepton_abseta']=np.abs(dfleading['JPsiLepton_eta'])\n",
    "\n",
    "dfsubleading=df[['JPsiLepton_2_pt','JPsiLepton_2_eta']].rename(\n",
    "    columns={'JPsiLepton_2_pt':'JPsiLepton_pt','JPsiLepton_2_eta':'JPsiLepton_eta'}\n",
    ") \n",
    "dfsubleading['JPsiLepton_abseta']=np.abs(dfsubleading['JPsiLepton_eta'])\n",
    "\n",
    "mask=(df['n_genjpsicands']>0)\n",
    "\n",
    "dflist=[(dfleading,mask,'Leading'),(dfsubleading,mask,'Sub-leading')]\n",
    "for v,vtitle,bins in [\n",
    "    ('JPsiLepton_pt', rf'Lepton $p_{{T}}$ [GeV]',np.linspace(0,10,100)),\n",
    "    ('JPsiLepton_abseta', rf'Lepton pseudo-rapidity',np.linspace(0,2.5,100)),\n",
    "        \n",
    "                     ]:\n",
    "    inspectDistribution(dflist,v,vtitle,bins)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b3147eff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming you have a DataFrame called 'df' with a column named 'column_name'\n",
    "# Replace 'df' and 'column_name' with the actual DataFrame and column name\n",
    "\n",
    "# Apply the mask to filter the DataFrame\n",
    "masked_df = df[mask]\n",
    "\n",
    "# Plot a histogram using the masked DataFrame\n",
    "plt.hist(masked_df['JPsi_mass'], bins=100)  # Adjust the number of bins as needed\n",
    "plt.xlabel('JPsi Mass')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Column')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "844155e2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
